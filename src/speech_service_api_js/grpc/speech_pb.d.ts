// @generated by protoc-gen-es v2.2.3
// @generated from file speech.proto (package viamlabs.service.speech.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file speech.proto.
 */
export declare const file_speech: GenFile;

/**
 * @generated from message viamlabs.service.speech.v1.SayRequest
 */
export declare type SayRequest = Message<"viamlabs.service.speech.v1.SayRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string text = 2;
   */
  text: string;

  /**
   * @generated from field: bool blocking = 3;
   */
  blocking: boolean;
};

/**
 * Describes the message viamlabs.service.speech.v1.SayRequest.
 * Use `create(SayRequestSchema)` to create a new message.
 */
export declare const SayRequestSchema: GenMessage<SayRequest>;

/**
 * @generated from message viamlabs.service.speech.v1.SayResponse
 */
export declare type SayResponse = Message<"viamlabs.service.speech.v1.SayResponse"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.SayResponse.
 * Use `create(SayResponseSchema)` to create a new message.
 */
export declare const SayResponseSchema: GenMessage<SayResponse>;

/**
 * @generated from message viamlabs.service.speech.v1.ToTextRequest
 */
export declare type ToTextRequest = Message<"viamlabs.service.speech.v1.ToTextRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: bytes speech = 2;
   */
  speech: Uint8Array;

  /**
   * @generated from field: string format = 3;
   */
  format: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.ToTextRequest.
 * Use `create(ToTextRequestSchema)` to create a new message.
 */
export declare const ToTextRequestSchema: GenMessage<ToTextRequest>;

/**
 * @generated from message viamlabs.service.speech.v1.ToTextResponse
 */
export declare type ToTextResponse = Message<"viamlabs.service.speech.v1.ToTextResponse"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.ToTextResponse.
 * Use `create(ToTextResponseSchema)` to create a new message.
 */
export declare const ToTextResponseSchema: GenMessage<ToTextResponse>;

/**
 * @generated from message viamlabs.service.speech.v1.ToSpeechRequest
 */
export declare type ToSpeechRequest = Message<"viamlabs.service.speech.v1.ToSpeechRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string text = 2;
   */
  text: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.ToSpeechRequest.
 * Use `create(ToSpeechRequestSchema)` to create a new message.
 */
export declare const ToSpeechRequestSchema: GenMessage<ToSpeechRequest>;

/**
 * @generated from message viamlabs.service.speech.v1.ToSpeechResponse
 */
export declare type ToSpeechResponse = Message<"viamlabs.service.speech.v1.ToSpeechResponse"> & {
  /**
   * @generated from field: bytes speech = 1;
   */
  speech: Uint8Array;
};

/**
 * Describes the message viamlabs.service.speech.v1.ToSpeechResponse.
 * Use `create(ToSpeechResponseSchema)` to create a new message.
 */
export declare const ToSpeechResponseSchema: GenMessage<ToSpeechResponse>;

/**
 * @generated from message viamlabs.service.speech.v1.CompletionRequest
 */
export declare type CompletionRequest = Message<"viamlabs.service.speech.v1.CompletionRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string text = 2;
   */
  text: string;

  /**
   * @generated from field: bool blocking = 3;
   */
  blocking: boolean;
};

/**
 * Describes the message viamlabs.service.speech.v1.CompletionRequest.
 * Use `create(CompletionRequestSchema)` to create a new message.
 */
export declare const CompletionRequestSchema: GenMessage<CompletionRequest>;

/**
 * @generated from message viamlabs.service.speech.v1.CompletionResponse
 */
export declare type CompletionResponse = Message<"viamlabs.service.speech.v1.CompletionResponse"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.CompletionResponse.
 * Use `create(CompletionResponseSchema)` to create a new message.
 */
export declare const CompletionResponseSchema: GenMessage<CompletionResponse>;

/**
 * @generated from message viamlabs.service.speech.v1.GetCommandsRequest
 */
export declare type GetCommandsRequest = Message<"viamlabs.service.speech.v1.GetCommandsRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: int32 number = 2;
   */
  number: number;
};

/**
 * Describes the message viamlabs.service.speech.v1.GetCommandsRequest.
 * Use `create(GetCommandsRequestSchema)` to create a new message.
 */
export declare const GetCommandsRequestSchema: GenMessage<GetCommandsRequest>;

/**
 * @generated from message viamlabs.service.speech.v1.GetCommandsResponse
 */
export declare type GetCommandsResponse = Message<"viamlabs.service.speech.v1.GetCommandsResponse"> & {
  /**
   * @generated from field: repeated string commands = 1;
   */
  commands: string[];
};

/**
 * Describes the message viamlabs.service.speech.v1.GetCommandsResponse.
 * Use `create(GetCommandsResponseSchema)` to create a new message.
 */
export declare const GetCommandsResponseSchema: GenMessage<GetCommandsResponse>;

/**
 * @generated from message viamlabs.service.speech.v1.ListenTriggerRequest
 */
export declare type ListenTriggerRequest = Message<"viamlabs.service.speech.v1.ListenTriggerRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.ListenTriggerRequest.
 * Use `create(ListenTriggerRequestSchema)` to create a new message.
 */
export declare const ListenTriggerRequestSchema: GenMessage<ListenTriggerRequest>;

/**
 * @generated from message viamlabs.service.speech.v1.ListenTriggerResponse
 */
export declare type ListenTriggerResponse = Message<"viamlabs.service.speech.v1.ListenTriggerResponse"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.ListenTriggerResponse.
 * Use `create(ListenTriggerResponseSchema)` to create a new message.
 */
export declare const ListenTriggerResponseSchema: GenMessage<ListenTriggerResponse>;

/**
 * @generated from message viamlabs.service.speech.v1.ListenRequest
 */
export declare type ListenRequest = Message<"viamlabs.service.speech.v1.ListenRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.ListenRequest.
 * Use `create(ListenRequestSchema)` to create a new message.
 */
export declare const ListenRequestSchema: GenMessage<ListenRequest>;

/**
 * @generated from message viamlabs.service.speech.v1.ListenResponse
 */
export declare type ListenResponse = Message<"viamlabs.service.speech.v1.ListenResponse"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.ListenResponse.
 * Use `create(ListenResponseSchema)` to create a new message.
 */
export declare const ListenResponseSchema: GenMessage<ListenResponse>;

/**
 * @generated from message viamlabs.service.speech.v1.IsSpeakingRequest
 */
export declare type IsSpeakingRequest = Message<"viamlabs.service.speech.v1.IsSpeakingRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message viamlabs.service.speech.v1.IsSpeakingRequest.
 * Use `create(IsSpeakingRequestSchema)` to create a new message.
 */
export declare const IsSpeakingRequestSchema: GenMessage<IsSpeakingRequest>;

/**
 * @generated from message viamlabs.service.speech.v1.IsSpeakingResponse
 */
export declare type IsSpeakingResponse = Message<"viamlabs.service.speech.v1.IsSpeakingResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;
};

/**
 * Describes the message viamlabs.service.speech.v1.IsSpeakingResponse.
 * Use `create(IsSpeakingResponseSchema)` to create a new message.
 */
export declare const IsSpeakingResponseSchema: GenMessage<IsSpeakingResponse>;

/**
 * @generated from service viamlabs.service.speech.v1.SpeechService
 */
export declare const SpeechService: GenService<{
  /**
   * @generated from rpc viamlabs.service.speech.v1.SpeechService.Say
   */
  say: {
    methodKind: "unary";
    input: typeof SayRequestSchema;
    output: typeof SayResponseSchema;
  },
  /**
   * @generated from rpc viamlabs.service.speech.v1.SpeechService.ToText
   */
  toText: {
    methodKind: "unary";
    input: typeof ToTextRequestSchema;
    output: typeof ToTextResponseSchema;
  },
  /**
   * @generated from rpc viamlabs.service.speech.v1.SpeechService.ToSpeech
   */
  toSpeech: {
    methodKind: "unary";
    input: typeof ToSpeechRequestSchema;
    output: typeof ToSpeechResponseSchema;
  },
  /**
   * @generated from rpc viamlabs.service.speech.v1.SpeechService.Completion
   */
  completion: {
    methodKind: "unary";
    input: typeof CompletionRequestSchema;
    output: typeof CompletionResponseSchema;
  },
  /**
   * @generated from rpc viamlabs.service.speech.v1.SpeechService.GetCommands
   */
  getCommands: {
    methodKind: "unary";
    input: typeof GetCommandsRequestSchema;
    output: typeof GetCommandsResponseSchema;
  },
  /**
   * @generated from rpc viamlabs.service.speech.v1.SpeechService.ListenTrigger
   */
  listenTrigger: {
    methodKind: "unary";
    input: typeof ListenTriggerRequestSchema;
    output: typeof ListenTriggerResponseSchema;
  },
  /**
   * @generated from rpc viamlabs.service.speech.v1.SpeechService.Listen
   */
  listen: {
    methodKind: "unary";
    input: typeof ListenRequestSchema;
    output: typeof ListenResponseSchema;
  },
  /**
   * @generated from rpc viamlabs.service.speech.v1.SpeechService.IsSpeaking
   */
  isSpeaking: {
    methodKind: "unary";
    input: typeof IsSpeakingRequestSchema;
    output: typeof IsSpeakingResponseSchema;
  },
}>;

