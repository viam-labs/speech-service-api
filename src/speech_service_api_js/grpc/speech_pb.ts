// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file speech.proto (package viamlabs.service.speech.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message viamlabs.service.speech.v1.SayRequest
 */
export class SayRequest extends Message<SayRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: bool blocking = 3;
   */
  blocking = false;

  constructor(data?: PartialMessage<SayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.SayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blocking", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SayRequest {
    return new SayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SayRequest {
    return new SayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SayRequest {
    return new SayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SayRequest | PlainMessage<SayRequest> | undefined, b: SayRequest | PlainMessage<SayRequest> | undefined): boolean {
    return proto3.util.equals(SayRequest, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.SayResponse
 */
export class SayResponse extends Message<SayResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<SayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.SayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SayResponse {
    return new SayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SayResponse {
    return new SayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SayResponse {
    return new SayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SayResponse | PlainMessage<SayResponse> | undefined, b: SayResponse | PlainMessage<SayResponse> | undefined): boolean {
    return proto3.util.equals(SayResponse, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.ToTextRequest
 */
export class ToTextRequest extends Message<ToTextRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bytes speech = 2;
   */
  speech = new Uint8Array(0);

  /**
   * @generated from field: string format = 3;
   */
  format = "";

  constructor(data?: PartialMessage<ToTextRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.ToTextRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "speech", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "format", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToTextRequest {
    return new ToTextRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToTextRequest {
    return new ToTextRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToTextRequest {
    return new ToTextRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ToTextRequest | PlainMessage<ToTextRequest> | undefined, b: ToTextRequest | PlainMessage<ToTextRequest> | undefined): boolean {
    return proto3.util.equals(ToTextRequest, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.ToTextResponse
 */
export class ToTextResponse extends Message<ToTextResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<ToTextResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.ToTextResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToTextResponse {
    return new ToTextResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToTextResponse {
    return new ToTextResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToTextResponse {
    return new ToTextResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ToTextResponse | PlainMessage<ToTextResponse> | undefined, b: ToTextResponse | PlainMessage<ToTextResponse> | undefined): boolean {
    return proto3.util.equals(ToTextResponse, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.ToSpeechRequest
 */
export class ToSpeechRequest extends Message<ToSpeechRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<ToSpeechRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.ToSpeechRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToSpeechRequest {
    return new ToSpeechRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToSpeechRequest {
    return new ToSpeechRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToSpeechRequest {
    return new ToSpeechRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ToSpeechRequest | PlainMessage<ToSpeechRequest> | undefined, b: ToSpeechRequest | PlainMessage<ToSpeechRequest> | undefined): boolean {
    return proto3.util.equals(ToSpeechRequest, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.ToSpeechResponse
 */
export class ToSpeechResponse extends Message<ToSpeechResponse> {
  /**
   * @generated from field: bytes speech = 1;
   */
  speech = new Uint8Array(0);

  constructor(data?: PartialMessage<ToSpeechResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.ToSpeechResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "speech", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToSpeechResponse {
    return new ToSpeechResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToSpeechResponse {
    return new ToSpeechResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToSpeechResponse {
    return new ToSpeechResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ToSpeechResponse | PlainMessage<ToSpeechResponse> | undefined, b: ToSpeechResponse | PlainMessage<ToSpeechResponse> | undefined): boolean {
    return proto3.util.equals(ToSpeechResponse, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.CompletionRequest
 */
export class CompletionRequest extends Message<CompletionRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: bool blocking = 3;
   */
  blocking = false;

  constructor(data?: PartialMessage<CompletionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.CompletionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blocking", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletionRequest {
    return new CompletionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletionRequest {
    return new CompletionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletionRequest {
    return new CompletionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CompletionRequest | PlainMessage<CompletionRequest> | undefined, b: CompletionRequest | PlainMessage<CompletionRequest> | undefined): boolean {
    return proto3.util.equals(CompletionRequest, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.CompletionResponse
 */
export class CompletionResponse extends Message<CompletionResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<CompletionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.CompletionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletionResponse {
    return new CompletionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletionResponse {
    return new CompletionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletionResponse {
    return new CompletionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CompletionResponse | PlainMessage<CompletionResponse> | undefined, b: CompletionResponse | PlainMessage<CompletionResponse> | undefined): boolean {
    return proto3.util.equals(CompletionResponse, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.GetCommandsRequest
 */
export class GetCommandsRequest extends Message<GetCommandsRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 number = 2;
   */
  number = 0;

  constructor(data?: PartialMessage<GetCommandsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.GetCommandsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommandsRequest {
    return new GetCommandsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommandsRequest {
    return new GetCommandsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommandsRequest {
    return new GetCommandsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommandsRequest | PlainMessage<GetCommandsRequest> | undefined, b: GetCommandsRequest | PlainMessage<GetCommandsRequest> | undefined): boolean {
    return proto3.util.equals(GetCommandsRequest, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.GetCommandsResponse
 */
export class GetCommandsResponse extends Message<GetCommandsResponse> {
  /**
   * @generated from field: repeated string commands = 1;
   */
  commands: string[] = [];

  constructor(data?: PartialMessage<GetCommandsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.GetCommandsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commands", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommandsResponse {
    return new GetCommandsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommandsResponse {
    return new GetCommandsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommandsResponse {
    return new GetCommandsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommandsResponse | PlainMessage<GetCommandsResponse> | undefined, b: GetCommandsResponse | PlainMessage<GetCommandsResponse> | undefined): boolean {
    return proto3.util.equals(GetCommandsResponse, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.ListenTriggerRequest
 */
export class ListenTriggerRequest extends Message<ListenTriggerRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<ListenTriggerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.ListenTriggerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenTriggerRequest {
    return new ListenTriggerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenTriggerRequest {
    return new ListenTriggerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenTriggerRequest {
    return new ListenTriggerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListenTriggerRequest | PlainMessage<ListenTriggerRequest> | undefined, b: ListenTriggerRequest | PlainMessage<ListenTriggerRequest> | undefined): boolean {
    return proto3.util.equals(ListenTriggerRequest, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.ListenTriggerResponse
 */
export class ListenTriggerResponse extends Message<ListenTriggerResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<ListenTriggerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.ListenTriggerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenTriggerResponse {
    return new ListenTriggerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenTriggerResponse {
    return new ListenTriggerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenTriggerResponse {
    return new ListenTriggerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListenTriggerResponse | PlainMessage<ListenTriggerResponse> | undefined, b: ListenTriggerResponse | PlainMessage<ListenTriggerResponse> | undefined): boolean {
    return proto3.util.equals(ListenTriggerResponse, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.ListenRequest
 */
export class ListenRequest extends Message<ListenRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ListenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.ListenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenRequest {
    return new ListenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenRequest {
    return new ListenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenRequest {
    return new ListenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListenRequest | PlainMessage<ListenRequest> | undefined, b: ListenRequest | PlainMessage<ListenRequest> | undefined): boolean {
    return proto3.util.equals(ListenRequest, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.ListenResponse
 */
export class ListenResponse extends Message<ListenResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<ListenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.ListenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenResponse {
    return new ListenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenResponse {
    return new ListenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenResponse {
    return new ListenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListenResponse | PlainMessage<ListenResponse> | undefined, b: ListenResponse | PlainMessage<ListenResponse> | undefined): boolean {
    return proto3.util.equals(ListenResponse, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.IsSpeakingRequest
 */
export class IsSpeakingRequest extends Message<IsSpeakingRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<IsSpeakingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.IsSpeakingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsSpeakingRequest {
    return new IsSpeakingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsSpeakingRequest {
    return new IsSpeakingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsSpeakingRequest {
    return new IsSpeakingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsSpeakingRequest | PlainMessage<IsSpeakingRequest> | undefined, b: IsSpeakingRequest | PlainMessage<IsSpeakingRequest> | undefined): boolean {
    return proto3.util.equals(IsSpeakingRequest, a, b);
  }
}

/**
 * @generated from message viamlabs.service.speech.v1.IsSpeakingResponse
 */
export class IsSpeakingResponse extends Message<IsSpeakingResponse> {
  /**
   * @generated from field: bool status = 1;
   */
  status = false;

  constructor(data?: PartialMessage<IsSpeakingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "viamlabs.service.speech.v1.IsSpeakingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsSpeakingResponse {
    return new IsSpeakingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsSpeakingResponse {
    return new IsSpeakingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsSpeakingResponse {
    return new IsSpeakingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsSpeakingResponse | PlainMessage<IsSpeakingResponse> | undefined, b: IsSpeakingResponse | PlainMessage<IsSpeakingResponse> | undefined): boolean {
    return proto3.util.equals(IsSpeakingResponse, a, b);
  }
}

