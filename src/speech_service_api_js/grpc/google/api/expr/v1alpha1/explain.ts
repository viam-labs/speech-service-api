/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/api/expr/v1alpha1/explain.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./value";
import * as pb_1 from "google-protobuf";
export namespace google.api.expr.v1alpha1 {
    /** @deprecated*/
    export class Explain extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: dependency_1.google.api.expr.v1alpha1.Value[];
            expr_steps?: Explain.ExprStep[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
                if ("expr_steps" in data && data.expr_steps != undefined) {
                    this.expr_steps = data.expr_steps;
                }
            }
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.api.expr.v1alpha1.Value, 1) as dependency_1.google.api.expr.v1alpha1.Value[];
        }
        set values(value: dependency_1.google.api.expr.v1alpha1.Value[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get expr_steps() {
            return pb_1.Message.getRepeatedWrapperField(this, Explain.ExprStep, 2) as Explain.ExprStep[];
        }
        set expr_steps(value: Explain.ExprStep[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            values?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Value.prototype.toObject>[];
            expr_steps?: ReturnType<typeof Explain.ExprStep.prototype.toObject>[];
        }): Explain {
            const message = new Explain({});
            if (data.values != null) {
                message.values = data.values.map(item => dependency_1.google.api.expr.v1alpha1.Value.fromObject(item));
            }
            if (data.expr_steps != null) {
                message.expr_steps = data.expr_steps.map(item => Explain.ExprStep.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                values?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Value.prototype.toObject>[];
                expr_steps?: ReturnType<typeof Explain.ExprStep.prototype.toObject>[];
            } = {};
            if (this.values != null) {
                data.values = this.values.map((item: dependency_1.google.api.expr.v1alpha1.Value) => item.toObject());
            }
            if (this.expr_steps != null) {
                data.expr_steps = this.expr_steps.map((item: Explain.ExprStep) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writeRepeatedMessage(1, this.values, (item: dependency_1.google.api.expr.v1alpha1.Value) => item.serialize(writer));
            if (this.expr_steps.length)
                writer.writeRepeatedMessage(2, this.expr_steps, (item: Explain.ExprStep) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Explain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Explain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.google.api.expr.v1alpha1.Value.deserialize(reader), dependency_1.google.api.expr.v1alpha1.Value));
                        break;
                    case 2:
                        reader.readMessage(message.expr_steps, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Explain.ExprStep.deserialize(reader), Explain.ExprStep));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Explain {
            return Explain.deserialize(bytes);
        }
    }
    export namespace Explain {
        export class ExprStep extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: number;
                value_index?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("value_index" in data && data.value_index != undefined) {
                        this.value_index = data.value_index;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get value_index() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set value_index(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                id?: number;
                value_index?: number;
            }): ExprStep {
                const message = new ExprStep({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.value_index != null) {
                    message.value_index = data.value_index;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number;
                    value_index?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.value_index != null) {
                    data.value_index = this.value_index;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id != 0)
                    writer.writeInt64(1, this.id);
                if (this.value_index != 0)
                    writer.writeInt32(2, this.value_index);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExprStep {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExprStep();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readInt64();
                            break;
                        case 2:
                            message.value_index = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ExprStep {
                return ExprStep.deserialize(bytes);
            }
        }
    }
}
