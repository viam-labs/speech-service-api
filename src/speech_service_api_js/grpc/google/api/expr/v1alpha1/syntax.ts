/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/api/expr/v1alpha1/syntax.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../protobuf/duration";
import * as dependency_2 from "./../../../protobuf/struct";
import * as dependency_3 from "./../../../protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace google.api.expr.v1alpha1 {
    export class ParsedExpr extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            expr?: Expr;
            source_info?: SourceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("expr" in data && data.expr != undefined) {
                    this.expr = data.expr;
                }
                if ("source_info" in data && data.source_info != undefined) {
                    this.source_info = data.source_info;
                }
            }
        }
        get expr() {
            return pb_1.Message.getWrapperField(this, Expr, 2) as Expr;
        }
        set expr(value: Expr) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_expr() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get source_info() {
            return pb_1.Message.getWrapperField(this, SourceInfo, 3) as SourceInfo;
        }
        set source_info(value: SourceInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_source_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            expr?: ReturnType<typeof Expr.prototype.toObject>;
            source_info?: ReturnType<typeof SourceInfo.prototype.toObject>;
        }): ParsedExpr {
            const message = new ParsedExpr({});
            if (data.expr != null) {
                message.expr = Expr.fromObject(data.expr);
            }
            if (data.source_info != null) {
                message.source_info = SourceInfo.fromObject(data.source_info);
            }
            return message;
        }
        toObject() {
            const data: {
                expr?: ReturnType<typeof Expr.prototype.toObject>;
                source_info?: ReturnType<typeof SourceInfo.prototype.toObject>;
            } = {};
            if (this.expr != null) {
                data.expr = this.expr.toObject();
            }
            if (this.source_info != null) {
                data.source_info = this.source_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_expr)
                writer.writeMessage(2, this.expr, () => this.expr.serialize(writer));
            if (this.has_source_info)
                writer.writeMessage(3, this.source_info, () => this.source_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParsedExpr {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParsedExpr();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.expr, () => message.expr = Expr.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.source_info, () => message.source_info = SourceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParsedExpr {
            return ParsedExpr.deserialize(bytes);
        }
    }
    export class Expr extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6, 7, 8, 9]];
        constructor(data?: any[] | ({
            id?: number;
        } & (({
            const_expr?: Constant;
            ident_expr?: never;
            select_expr?: never;
            call_expr?: never;
            list_expr?: never;
            struct_expr?: never;
            comprehension_expr?: never;
        } | {
            const_expr?: never;
            ident_expr?: Expr.Ident;
            select_expr?: never;
            call_expr?: never;
            list_expr?: never;
            struct_expr?: never;
            comprehension_expr?: never;
        } | {
            const_expr?: never;
            ident_expr?: never;
            select_expr?: Expr.Select;
            call_expr?: never;
            list_expr?: never;
            struct_expr?: never;
            comprehension_expr?: never;
        } | {
            const_expr?: never;
            ident_expr?: never;
            select_expr?: never;
            call_expr?: Expr.Call;
            list_expr?: never;
            struct_expr?: never;
            comprehension_expr?: never;
        } | {
            const_expr?: never;
            ident_expr?: never;
            select_expr?: never;
            call_expr?: never;
            list_expr?: Expr.CreateList;
            struct_expr?: never;
            comprehension_expr?: never;
        } | {
            const_expr?: never;
            ident_expr?: never;
            select_expr?: never;
            call_expr?: never;
            list_expr?: never;
            struct_expr?: Expr.CreateStruct;
            comprehension_expr?: never;
        } | {
            const_expr?: never;
            ident_expr?: never;
            select_expr?: never;
            call_expr?: never;
            list_expr?: never;
            struct_expr?: never;
            comprehension_expr?: Expr.Comprehension;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("const_expr" in data && data.const_expr != undefined) {
                    this.const_expr = data.const_expr;
                }
                if ("ident_expr" in data && data.ident_expr != undefined) {
                    this.ident_expr = data.ident_expr;
                }
                if ("select_expr" in data && data.select_expr != undefined) {
                    this.select_expr = data.select_expr;
                }
                if ("call_expr" in data && data.call_expr != undefined) {
                    this.call_expr = data.call_expr;
                }
                if ("list_expr" in data && data.list_expr != undefined) {
                    this.list_expr = data.list_expr;
                }
                if ("struct_expr" in data && data.struct_expr != undefined) {
                    this.struct_expr = data.struct_expr;
                }
                if ("comprehension_expr" in data && data.comprehension_expr != undefined) {
                    this.comprehension_expr = data.comprehension_expr;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get const_expr() {
            return pb_1.Message.getWrapperField(this, Constant, 3) as Constant;
        }
        set const_expr(value: Constant) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_const_expr() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ident_expr() {
            return pb_1.Message.getWrapperField(this, Expr.Ident, 4) as Expr.Ident;
        }
        set ident_expr(value: Expr.Ident) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_ident_expr() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get select_expr() {
            return pb_1.Message.getWrapperField(this, Expr.Select, 5) as Expr.Select;
        }
        set select_expr(value: Expr.Select) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_select_expr() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get call_expr() {
            return pb_1.Message.getWrapperField(this, Expr.Call, 6) as Expr.Call;
        }
        set call_expr(value: Expr.Call) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_call_expr() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get list_expr() {
            return pb_1.Message.getWrapperField(this, Expr.CreateList, 7) as Expr.CreateList;
        }
        set list_expr(value: Expr.CreateList) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_list_expr() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get struct_expr() {
            return pb_1.Message.getWrapperField(this, Expr.CreateStruct, 8) as Expr.CreateStruct;
        }
        set struct_expr(value: Expr.CreateStruct) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_struct_expr() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get comprehension_expr() {
            return pb_1.Message.getWrapperField(this, Expr.Comprehension, 9) as Expr.Comprehension;
        }
        set comprehension_expr(value: Expr.Comprehension) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_comprehension_expr() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get expr_kind() {
            const cases: {
                [index: number]: "none" | "const_expr" | "ident_expr" | "select_expr" | "call_expr" | "list_expr" | "struct_expr" | "comprehension_expr";
            } = {
                0: "none",
                3: "const_expr",
                4: "ident_expr",
                5: "select_expr",
                6: "call_expr",
                7: "list_expr",
                8: "struct_expr",
                9: "comprehension_expr"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7, 8, 9])];
        }
        static fromObject(data: {
            id?: number;
            const_expr?: ReturnType<typeof Constant.prototype.toObject>;
            ident_expr?: ReturnType<typeof Expr.Ident.prototype.toObject>;
            select_expr?: ReturnType<typeof Expr.Select.prototype.toObject>;
            call_expr?: ReturnType<typeof Expr.Call.prototype.toObject>;
            list_expr?: ReturnType<typeof Expr.CreateList.prototype.toObject>;
            struct_expr?: ReturnType<typeof Expr.CreateStruct.prototype.toObject>;
            comprehension_expr?: ReturnType<typeof Expr.Comprehension.prototype.toObject>;
        }): Expr {
            const message = new Expr({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.const_expr != null) {
                message.const_expr = Constant.fromObject(data.const_expr);
            }
            if (data.ident_expr != null) {
                message.ident_expr = Expr.Ident.fromObject(data.ident_expr);
            }
            if (data.select_expr != null) {
                message.select_expr = Expr.Select.fromObject(data.select_expr);
            }
            if (data.call_expr != null) {
                message.call_expr = Expr.Call.fromObject(data.call_expr);
            }
            if (data.list_expr != null) {
                message.list_expr = Expr.CreateList.fromObject(data.list_expr);
            }
            if (data.struct_expr != null) {
                message.struct_expr = Expr.CreateStruct.fromObject(data.struct_expr);
            }
            if (data.comprehension_expr != null) {
                message.comprehension_expr = Expr.Comprehension.fromObject(data.comprehension_expr);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                const_expr?: ReturnType<typeof Constant.prototype.toObject>;
                ident_expr?: ReturnType<typeof Expr.Ident.prototype.toObject>;
                select_expr?: ReturnType<typeof Expr.Select.prototype.toObject>;
                call_expr?: ReturnType<typeof Expr.Call.prototype.toObject>;
                list_expr?: ReturnType<typeof Expr.CreateList.prototype.toObject>;
                struct_expr?: ReturnType<typeof Expr.CreateStruct.prototype.toObject>;
                comprehension_expr?: ReturnType<typeof Expr.Comprehension.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.const_expr != null) {
                data.const_expr = this.const_expr.toObject();
            }
            if (this.ident_expr != null) {
                data.ident_expr = this.ident_expr.toObject();
            }
            if (this.select_expr != null) {
                data.select_expr = this.select_expr.toObject();
            }
            if (this.call_expr != null) {
                data.call_expr = this.call_expr.toObject();
            }
            if (this.list_expr != null) {
                data.list_expr = this.list_expr.toObject();
            }
            if (this.struct_expr != null) {
                data.struct_expr = this.struct_expr.toObject();
            }
            if (this.comprehension_expr != null) {
                data.comprehension_expr = this.comprehension_expr.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(2, this.id);
            if (this.has_const_expr)
                writer.writeMessage(3, this.const_expr, () => this.const_expr.serialize(writer));
            if (this.has_ident_expr)
                writer.writeMessage(4, this.ident_expr, () => this.ident_expr.serialize(writer));
            if (this.has_select_expr)
                writer.writeMessage(5, this.select_expr, () => this.select_expr.serialize(writer));
            if (this.has_call_expr)
                writer.writeMessage(6, this.call_expr, () => this.call_expr.serialize(writer));
            if (this.has_list_expr)
                writer.writeMessage(7, this.list_expr, () => this.list_expr.serialize(writer));
            if (this.has_struct_expr)
                writer.writeMessage(8, this.struct_expr, () => this.struct_expr.serialize(writer));
            if (this.has_comprehension_expr)
                writer.writeMessage(9, this.comprehension_expr, () => this.comprehension_expr.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Expr {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Expr();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.id = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.const_expr, () => message.const_expr = Constant.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.ident_expr, () => message.ident_expr = Expr.Ident.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.select_expr, () => message.select_expr = Expr.Select.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.call_expr, () => message.call_expr = Expr.Call.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.list_expr, () => message.list_expr = Expr.CreateList.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.struct_expr, () => message.struct_expr = Expr.CreateStruct.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.comprehension_expr, () => message.comprehension_expr = Expr.Comprehension.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Expr {
            return Expr.deserialize(bytes);
        }
    }
    export namespace Expr {
        export class Ident extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                name?: string;
            }): Ident {
                const message = new Ident({});
                if (data.name != null) {
                    message.name = data.name;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ident {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ident();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Ident {
                return Ident.deserialize(bytes);
            }
        }
        export class Select extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                operand?: Expr;
                field?: string;
                test_only?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("operand" in data && data.operand != undefined) {
                        this.operand = data.operand;
                    }
                    if ("field" in data && data.field != undefined) {
                        this.field = data.field;
                    }
                    if ("test_only" in data && data.test_only != undefined) {
                        this.test_only = data.test_only;
                    }
                }
            }
            get operand() {
                return pb_1.Message.getWrapperField(this, Expr, 1) as Expr;
            }
            set operand(value: Expr) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_operand() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get field() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set field(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get test_only() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set test_only(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                operand?: ReturnType<typeof Expr.prototype.toObject>;
                field?: string;
                test_only?: boolean;
            }): Select {
                const message = new Select({});
                if (data.operand != null) {
                    message.operand = Expr.fromObject(data.operand);
                }
                if (data.field != null) {
                    message.field = data.field;
                }
                if (data.test_only != null) {
                    message.test_only = data.test_only;
                }
                return message;
            }
            toObject() {
                const data: {
                    operand?: ReturnType<typeof Expr.prototype.toObject>;
                    field?: string;
                    test_only?: boolean;
                } = {};
                if (this.operand != null) {
                    data.operand = this.operand.toObject();
                }
                if (this.field != null) {
                    data.field = this.field;
                }
                if (this.test_only != null) {
                    data.test_only = this.test_only;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_operand)
                    writer.writeMessage(1, this.operand, () => this.operand.serialize(writer));
                if (this.field.length)
                    writer.writeString(2, this.field);
                if (this.test_only != false)
                    writer.writeBool(3, this.test_only);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Select {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Select();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.operand, () => message.operand = Expr.deserialize(reader));
                            break;
                        case 2:
                            message.field = reader.readString();
                            break;
                        case 3:
                            message.test_only = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Select {
                return Select.deserialize(bytes);
            }
        }
        export class Call extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                target?: Expr;
                function?: string;
                args?: Expr[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("target" in data && data.target != undefined) {
                        this.target = data.target;
                    }
                    if ("function" in data && data.function != undefined) {
                        this.function = data.function;
                    }
                    if ("args" in data && data.args != undefined) {
                        this.args = data.args;
                    }
                }
            }
            get target() {
                return pb_1.Message.getWrapperField(this, Expr, 1) as Expr;
            }
            set target(value: Expr) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_target() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get function() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set function(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get args() {
                return pb_1.Message.getRepeatedWrapperField(this, Expr, 3) as Expr[];
            }
            set args(value: Expr[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                target?: ReturnType<typeof Expr.prototype.toObject>;
                function?: string;
                args?: ReturnType<typeof Expr.prototype.toObject>[];
            }): Call {
                const message = new Call({});
                if (data.target != null) {
                    message.target = Expr.fromObject(data.target);
                }
                if (data.function != null) {
                    message.function = data.function;
                }
                if (data.args != null) {
                    message.args = data.args.map(item => Expr.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    target?: ReturnType<typeof Expr.prototype.toObject>;
                    function?: string;
                    args?: ReturnType<typeof Expr.prototype.toObject>[];
                } = {};
                if (this.target != null) {
                    data.target = this.target.toObject();
                }
                if (this.function != null) {
                    data.function = this.function;
                }
                if (this.args != null) {
                    data.args = this.args.map((item: Expr) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_target)
                    writer.writeMessage(1, this.target, () => this.target.serialize(writer));
                if (this.function.length)
                    writer.writeString(2, this.function);
                if (this.args.length)
                    writer.writeRepeatedMessage(3, this.args, (item: Expr) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Call {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Call();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.target, () => message.target = Expr.deserialize(reader));
                            break;
                        case 2:
                            message.function = reader.readString();
                            break;
                        case 3:
                            reader.readMessage(message.args, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Expr.deserialize(reader), Expr));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Call {
                return Call.deserialize(bytes);
            }
        }
        export class CreateList extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                elements?: Expr[];
                optional_indices?: number[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("elements" in data && data.elements != undefined) {
                        this.elements = data.elements;
                    }
                    if ("optional_indices" in data && data.optional_indices != undefined) {
                        this.optional_indices = data.optional_indices;
                    }
                }
            }
            get elements() {
                return pb_1.Message.getRepeatedWrapperField(this, Expr, 1) as Expr[];
            }
            set elements(value: Expr[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get optional_indices() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
            }
            set optional_indices(value: number[]) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                elements?: ReturnType<typeof Expr.prototype.toObject>[];
                optional_indices?: number[];
            }): CreateList {
                const message = new CreateList({});
                if (data.elements != null) {
                    message.elements = data.elements.map(item => Expr.fromObject(item));
                }
                if (data.optional_indices != null) {
                    message.optional_indices = data.optional_indices;
                }
                return message;
            }
            toObject() {
                const data: {
                    elements?: ReturnType<typeof Expr.prototype.toObject>[];
                    optional_indices?: number[];
                } = {};
                if (this.elements != null) {
                    data.elements = this.elements.map((item: Expr) => item.toObject());
                }
                if (this.optional_indices != null) {
                    data.optional_indices = this.optional_indices;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.elements.length)
                    writer.writeRepeatedMessage(1, this.elements, (item: Expr) => item.serialize(writer));
                if (this.optional_indices.length)
                    writer.writePackedInt32(2, this.optional_indices);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateList {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateList();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.elements, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Expr.deserialize(reader), Expr));
                            break;
                        case 2:
                            message.optional_indices = reader.readPackedInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CreateList {
                return CreateList.deserialize(bytes);
            }
        }
        export class CreateStruct extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                message_name?: string;
                entries?: Expr.CreateStruct.Entry[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("message_name" in data && data.message_name != undefined) {
                        this.message_name = data.message_name;
                    }
                    if ("entries" in data && data.entries != undefined) {
                        this.entries = data.entries;
                    }
                }
            }
            get message_name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set message_name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get entries() {
                return pb_1.Message.getRepeatedWrapperField(this, Expr.CreateStruct.Entry, 2) as Expr.CreateStruct.Entry[];
            }
            set entries(value: Expr.CreateStruct.Entry[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                message_name?: string;
                entries?: ReturnType<typeof Expr.CreateStruct.Entry.prototype.toObject>[];
            }): CreateStruct {
                const message = new CreateStruct({});
                if (data.message_name != null) {
                    message.message_name = data.message_name;
                }
                if (data.entries != null) {
                    message.entries = data.entries.map(item => Expr.CreateStruct.Entry.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    message_name?: string;
                    entries?: ReturnType<typeof Expr.CreateStruct.Entry.prototype.toObject>[];
                } = {};
                if (this.message_name != null) {
                    data.message_name = this.message_name;
                }
                if (this.entries != null) {
                    data.entries = this.entries.map((item: Expr.CreateStruct.Entry) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.message_name.length)
                    writer.writeString(1, this.message_name);
                if (this.entries.length)
                    writer.writeRepeatedMessage(2, this.entries, (item: Expr.CreateStruct.Entry) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateStruct {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateStruct();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.message_name = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Expr.CreateStruct.Entry.deserialize(reader), Expr.CreateStruct.Entry));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CreateStruct {
                return CreateStruct.deserialize(bytes);
            }
        }
        export namespace CreateStruct {
            export class Entry extends pb_1.Message {
                #one_of_decls: number[][] = [[2, 3]];
                constructor(data?: any[] | ({
                    id?: number;
                    value?: Expr;
                    optional_entry?: boolean;
                } & (({
                    field_key?: string;
                    map_key?: never;
                } | {
                    field_key?: never;
                    map_key?: Expr;
                })))) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("id" in data && data.id != undefined) {
                            this.id = data.id;
                        }
                        if ("field_key" in data && data.field_key != undefined) {
                            this.field_key = data.field_key;
                        }
                        if ("map_key" in data && data.map_key != undefined) {
                            this.map_key = data.map_key;
                        }
                        if ("value" in data && data.value != undefined) {
                            this.value = data.value;
                        }
                        if ("optional_entry" in data && data.optional_entry != undefined) {
                            this.optional_entry = data.optional_entry;
                        }
                    }
                }
                get id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set id(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get field_key() {
                    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
                }
                set field_key(value: string) {
                    pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
                }
                get has_field_key() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get map_key() {
                    return pb_1.Message.getWrapperField(this, Expr, 3) as Expr;
                }
                set map_key(value: Expr) {
                    pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
                }
                get has_map_key() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get value() {
                    return pb_1.Message.getWrapperField(this, Expr, 4) as Expr;
                }
                set value(value: Expr) {
                    pb_1.Message.setWrapperField(this, 4, value);
                }
                get has_value() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                get optional_entry() {
                    return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
                }
                set optional_entry(value: boolean) {
                    pb_1.Message.setField(this, 5, value);
                }
                get key_kind() {
                    const cases: {
                        [index: number]: "none" | "field_key" | "map_key";
                    } = {
                        0: "none",
                        2: "field_key",
                        3: "map_key"
                    };
                    return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
                }
                static fromObject(data: {
                    id?: number;
                    field_key?: string;
                    map_key?: ReturnType<typeof Expr.prototype.toObject>;
                    value?: ReturnType<typeof Expr.prototype.toObject>;
                    optional_entry?: boolean;
                }): Entry {
                    const message = new Entry({});
                    if (data.id != null) {
                        message.id = data.id;
                    }
                    if (data.field_key != null) {
                        message.field_key = data.field_key;
                    }
                    if (data.map_key != null) {
                        message.map_key = Expr.fromObject(data.map_key);
                    }
                    if (data.value != null) {
                        message.value = Expr.fromObject(data.value);
                    }
                    if (data.optional_entry != null) {
                        message.optional_entry = data.optional_entry;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        id?: number;
                        field_key?: string;
                        map_key?: ReturnType<typeof Expr.prototype.toObject>;
                        value?: ReturnType<typeof Expr.prototype.toObject>;
                        optional_entry?: boolean;
                    } = {};
                    if (this.id != null) {
                        data.id = this.id;
                    }
                    if (this.field_key != null) {
                        data.field_key = this.field_key;
                    }
                    if (this.map_key != null) {
                        data.map_key = this.map_key.toObject();
                    }
                    if (this.value != null) {
                        data.value = this.value.toObject();
                    }
                    if (this.optional_entry != null) {
                        data.optional_entry = this.optional_entry;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.id != 0)
                        writer.writeInt64(1, this.id);
                    if (this.has_field_key)
                        writer.writeString(2, this.field_key);
                    if (this.has_map_key)
                        writer.writeMessage(3, this.map_key, () => this.map_key.serialize(writer));
                    if (this.has_value)
                        writer.writeMessage(4, this.value, () => this.value.serialize(writer));
                    if (this.optional_entry != false)
                        writer.writeBool(5, this.optional_entry);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entry {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Entry();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.id = reader.readInt64();
                                break;
                            case 2:
                                message.field_key = reader.readString();
                                break;
                            case 3:
                                reader.readMessage(message.map_key, () => message.map_key = Expr.deserialize(reader));
                                break;
                            case 4:
                                reader.readMessage(message.value, () => message.value = Expr.deserialize(reader));
                                break;
                            case 5:
                                message.optional_entry = reader.readBool();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Entry {
                    return Entry.deserialize(bytes);
                }
            }
        }
        export class Comprehension extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                iter_var?: string;
                iter_range?: Expr;
                accu_var?: string;
                accu_init?: Expr;
                loop_condition?: Expr;
                loop_step?: Expr;
                result?: Expr;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("iter_var" in data && data.iter_var != undefined) {
                        this.iter_var = data.iter_var;
                    }
                    if ("iter_range" in data && data.iter_range != undefined) {
                        this.iter_range = data.iter_range;
                    }
                    if ("accu_var" in data && data.accu_var != undefined) {
                        this.accu_var = data.accu_var;
                    }
                    if ("accu_init" in data && data.accu_init != undefined) {
                        this.accu_init = data.accu_init;
                    }
                    if ("loop_condition" in data && data.loop_condition != undefined) {
                        this.loop_condition = data.loop_condition;
                    }
                    if ("loop_step" in data && data.loop_step != undefined) {
                        this.loop_step = data.loop_step;
                    }
                    if ("result" in data && data.result != undefined) {
                        this.result = data.result;
                    }
                }
            }
            get iter_var() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set iter_var(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get iter_range() {
                return pb_1.Message.getWrapperField(this, Expr, 2) as Expr;
            }
            set iter_range(value: Expr) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_iter_range() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get accu_var() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set accu_var(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get accu_init() {
                return pb_1.Message.getWrapperField(this, Expr, 4) as Expr;
            }
            set accu_init(value: Expr) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_accu_init() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get loop_condition() {
                return pb_1.Message.getWrapperField(this, Expr, 5) as Expr;
            }
            set loop_condition(value: Expr) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_loop_condition() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get loop_step() {
                return pb_1.Message.getWrapperField(this, Expr, 6) as Expr;
            }
            set loop_step(value: Expr) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_loop_step() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get result() {
                return pb_1.Message.getWrapperField(this, Expr, 7) as Expr;
            }
            set result(value: Expr) {
                pb_1.Message.setWrapperField(this, 7, value);
            }
            get has_result() {
                return pb_1.Message.getField(this, 7) != null;
            }
            static fromObject(data: {
                iter_var?: string;
                iter_range?: ReturnType<typeof Expr.prototype.toObject>;
                accu_var?: string;
                accu_init?: ReturnType<typeof Expr.prototype.toObject>;
                loop_condition?: ReturnType<typeof Expr.prototype.toObject>;
                loop_step?: ReturnType<typeof Expr.prototype.toObject>;
                result?: ReturnType<typeof Expr.prototype.toObject>;
            }): Comprehension {
                const message = new Comprehension({});
                if (data.iter_var != null) {
                    message.iter_var = data.iter_var;
                }
                if (data.iter_range != null) {
                    message.iter_range = Expr.fromObject(data.iter_range);
                }
                if (data.accu_var != null) {
                    message.accu_var = data.accu_var;
                }
                if (data.accu_init != null) {
                    message.accu_init = Expr.fromObject(data.accu_init);
                }
                if (data.loop_condition != null) {
                    message.loop_condition = Expr.fromObject(data.loop_condition);
                }
                if (data.loop_step != null) {
                    message.loop_step = Expr.fromObject(data.loop_step);
                }
                if (data.result != null) {
                    message.result = Expr.fromObject(data.result);
                }
                return message;
            }
            toObject() {
                const data: {
                    iter_var?: string;
                    iter_range?: ReturnType<typeof Expr.prototype.toObject>;
                    accu_var?: string;
                    accu_init?: ReturnType<typeof Expr.prototype.toObject>;
                    loop_condition?: ReturnType<typeof Expr.prototype.toObject>;
                    loop_step?: ReturnType<typeof Expr.prototype.toObject>;
                    result?: ReturnType<typeof Expr.prototype.toObject>;
                } = {};
                if (this.iter_var != null) {
                    data.iter_var = this.iter_var;
                }
                if (this.iter_range != null) {
                    data.iter_range = this.iter_range.toObject();
                }
                if (this.accu_var != null) {
                    data.accu_var = this.accu_var;
                }
                if (this.accu_init != null) {
                    data.accu_init = this.accu_init.toObject();
                }
                if (this.loop_condition != null) {
                    data.loop_condition = this.loop_condition.toObject();
                }
                if (this.loop_step != null) {
                    data.loop_step = this.loop_step.toObject();
                }
                if (this.result != null) {
                    data.result = this.result.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.iter_var.length)
                    writer.writeString(1, this.iter_var);
                if (this.has_iter_range)
                    writer.writeMessage(2, this.iter_range, () => this.iter_range.serialize(writer));
                if (this.accu_var.length)
                    writer.writeString(3, this.accu_var);
                if (this.has_accu_init)
                    writer.writeMessage(4, this.accu_init, () => this.accu_init.serialize(writer));
                if (this.has_loop_condition)
                    writer.writeMessage(5, this.loop_condition, () => this.loop_condition.serialize(writer));
                if (this.has_loop_step)
                    writer.writeMessage(6, this.loop_step, () => this.loop_step.serialize(writer));
                if (this.has_result)
                    writer.writeMessage(7, this.result, () => this.result.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Comprehension {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Comprehension();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.iter_var = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.iter_range, () => message.iter_range = Expr.deserialize(reader));
                            break;
                        case 3:
                            message.accu_var = reader.readString();
                            break;
                        case 4:
                            reader.readMessage(message.accu_init, () => message.accu_init = Expr.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.loop_condition, () => message.loop_condition = Expr.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.loop_step, () => message.loop_step = Expr.deserialize(reader));
                            break;
                        case 7:
                            reader.readMessage(message.result, () => message.result = Expr.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Comprehension {
                return Comprehension.deserialize(bytes);
            }
        }
    }
    export class Constant extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9]];
        constructor(data?: any[] | ({} & (({
            null_value?: dependency_2.google.protobuf.NullValue;
            bool_value?: never;
            int64_value?: never;
            uint64_value?: never;
            double_value?: never;
            string_value?: never;
            bytes_value?: never;
            duration_value?: never;
            timestamp_value?: never;
        } | {
            null_value?: never;
            bool_value?: boolean;
            int64_value?: never;
            uint64_value?: never;
            double_value?: never;
            string_value?: never;
            bytes_value?: never;
            duration_value?: never;
            timestamp_value?: never;
        } | {
            null_value?: never;
            bool_value?: never;
            int64_value?: number;
            uint64_value?: never;
            double_value?: never;
            string_value?: never;
            bytes_value?: never;
            duration_value?: never;
            timestamp_value?: never;
        } | {
            null_value?: never;
            bool_value?: never;
            int64_value?: never;
            uint64_value?: number;
            double_value?: never;
            string_value?: never;
            bytes_value?: never;
            duration_value?: never;
            timestamp_value?: never;
        } | {
            null_value?: never;
            bool_value?: never;
            int64_value?: never;
            uint64_value?: never;
            double_value?: number;
            string_value?: never;
            bytes_value?: never;
            duration_value?: never;
            timestamp_value?: never;
        } | {
            null_value?: never;
            bool_value?: never;
            int64_value?: never;
            uint64_value?: never;
            double_value?: never;
            string_value?: string;
            bytes_value?: never;
            duration_value?: never;
            timestamp_value?: never;
        } | {
            null_value?: never;
            bool_value?: never;
            int64_value?: never;
            uint64_value?: never;
            double_value?: never;
            string_value?: never;
            bytes_value?: Uint8Array;
            duration_value?: never;
            timestamp_value?: never;
        } | {
            null_value?: never;
            bool_value?: never;
            int64_value?: never;
            uint64_value?: never;
            double_value?: never;
            string_value?: never;
            bytes_value?: never;
            /** @deprecated*/
            duration_value?: dependency_1.google.protobuf.Duration;
            timestamp_value?: never;
        } | {
            null_value?: never;
            bool_value?: never;
            int64_value?: never;
            uint64_value?: never;
            double_value?: never;
            string_value?: never;
            bytes_value?: never;
            duration_value?: never;
            /** @deprecated*/
            timestamp_value?: dependency_3.google.protobuf.Timestamp;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("null_value" in data && data.null_value != undefined) {
                    this.null_value = data.null_value;
                }
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
                if ("int64_value" in data && data.int64_value != undefined) {
                    this.int64_value = data.int64_value;
                }
                if ("uint64_value" in data && data.uint64_value != undefined) {
                    this.uint64_value = data.uint64_value;
                }
                if ("double_value" in data && data.double_value != undefined) {
                    this.double_value = data.double_value;
                }
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
                if ("bytes_value" in data && data.bytes_value != undefined) {
                    this.bytes_value = data.bytes_value;
                }
                if ("duration_value" in data && data.duration_value != undefined) {
                    this.duration_value = data.duration_value;
                }
                if ("timestamp_value" in data && data.timestamp_value != undefined) {
                    this.timestamp_value = data.timestamp_value;
                }
            }
        }
        get null_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.google.protobuf.NullValue.NULL_VALUE) as dependency_2.google.protobuf.NullValue;
        }
        set null_value(value: dependency_2.google.protobuf.NullValue) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_null_value() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get bool_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set bool_value(value: boolean) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_bool_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get int64_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set int64_value(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_int64_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get uint64_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set uint64_value(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_uint64_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get double_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set double_value(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_double_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get string_value() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set string_value(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_string_value() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get bytes_value() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set bytes_value(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
        }
        get has_bytes_value() {
            return pb_1.Message.getField(this, 7) != null;
        }
        /** @deprecated*/
        get duration_value() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Duration, 8) as dependency_1.google.protobuf.Duration;
        }
        /** @deprecated*/
        set duration_value(value: dependency_1.google.protobuf.Duration) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        /** @deprecated*/
        get has_duration_value() {
            return pb_1.Message.getField(this, 8) != null;
        }
        /** @deprecated*/
        get timestamp_value() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 9) as dependency_3.google.protobuf.Timestamp;
        }
        /** @deprecated*/
        set timestamp_value(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        /** @deprecated*/
        get has_timestamp_value() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get constant_kind() {
            const cases: {
                [index: number]: "none" | "null_value" | "bool_value" | "int64_value" | "uint64_value" | "double_value" | "string_value" | "bytes_value" | "duration_value" | "timestamp_value";
            } = {
                0: "none",
                1: "null_value",
                2: "bool_value",
                3: "int64_value",
                4: "uint64_value",
                5: "double_value",
                6: "string_value",
                7: "bytes_value",
                8: "duration_value",
                9: "timestamp_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9])];
        }
        static fromObject(data: {
            null_value?: dependency_2.google.protobuf.NullValue;
            bool_value?: boolean;
            int64_value?: number;
            uint64_value?: number;
            double_value?: number;
            string_value?: string;
            bytes_value?: Uint8Array;
            duration_value?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
            timestamp_value?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): Constant {
            const message = new Constant({});
            if (data.null_value != null) {
                message.null_value = data.null_value;
            }
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            if (data.int64_value != null) {
                message.int64_value = data.int64_value;
            }
            if (data.uint64_value != null) {
                message.uint64_value = data.uint64_value;
            }
            if (data.double_value != null) {
                message.double_value = data.double_value;
            }
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            if (data.bytes_value != null) {
                message.bytes_value = data.bytes_value;
            }
            if (data.duration_value != null) {
                message.duration_value = dependency_1.google.protobuf.Duration.fromObject(data.duration_value);
            }
            if (data.timestamp_value != null) {
                message.timestamp_value = dependency_3.google.protobuf.Timestamp.fromObject(data.timestamp_value);
            }
            return message;
        }
        toObject() {
            const data: {
                null_value?: dependency_2.google.protobuf.NullValue;
                bool_value?: boolean;
                int64_value?: number;
                uint64_value?: number;
                double_value?: number;
                string_value?: string;
                bytes_value?: Uint8Array;
                duration_value?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
                timestamp_value?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.null_value != null) {
                data.null_value = this.null_value;
            }
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            if (this.int64_value != null) {
                data.int64_value = this.int64_value;
            }
            if (this.uint64_value != null) {
                data.uint64_value = this.uint64_value;
            }
            if (this.double_value != null) {
                data.double_value = this.double_value;
            }
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            if (this.bytes_value != null) {
                data.bytes_value = this.bytes_value;
            }
            if (this.duration_value != null) {
                data.duration_value = this.duration_value.toObject();
            }
            if (this.timestamp_value != null) {
                data.timestamp_value = this.timestamp_value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_null_value)
                writer.writeEnum(1, this.null_value);
            if (this.has_bool_value)
                writer.writeBool(2, this.bool_value);
            if (this.has_int64_value)
                writer.writeInt64(3, this.int64_value);
            if (this.has_uint64_value)
                writer.writeUint64(4, this.uint64_value);
            if (this.has_double_value)
                writer.writeDouble(5, this.double_value);
            if (this.has_string_value)
                writer.writeString(6, this.string_value);
            if (this.has_bytes_value)
                writer.writeBytes(7, this.bytes_value);
            if (this.has_duration_value)
                writer.writeMessage(8, this.duration_value, () => this.duration_value.serialize(writer));
            if (this.has_timestamp_value)
                writer.writeMessage(9, this.timestamp_value, () => this.timestamp_value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Constant {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Constant();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.null_value = reader.readEnum();
                        break;
                    case 2:
                        message.bool_value = reader.readBool();
                        break;
                    case 3:
                        message.int64_value = reader.readInt64();
                        break;
                    case 4:
                        message.uint64_value = reader.readUint64();
                        break;
                    case 5:
                        message.double_value = reader.readDouble();
                        break;
                    case 6:
                        message.string_value = reader.readString();
                        break;
                    case 7:
                        message.bytes_value = reader.readBytes();
                        break;
                    case 8:
                        reader.readMessage(message.duration_value, () => message.duration_value = dependency_1.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.timestamp_value, () => message.timestamp_value = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Constant {
            return Constant.deserialize(bytes);
        }
    }
    export class SourceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            syntax_version?: string;
            location?: string;
            line_offsets?: number[];
            positions?: Map<number, number>;
            macro_calls?: Map<number, Expr>;
            extensions?: SourceInfo.Extension[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("syntax_version" in data && data.syntax_version != undefined) {
                    this.syntax_version = data.syntax_version;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("line_offsets" in data && data.line_offsets != undefined) {
                    this.line_offsets = data.line_offsets;
                }
                if ("positions" in data && data.positions != undefined) {
                    this.positions = data.positions;
                }
                if ("macro_calls" in data && data.macro_calls != undefined) {
                    this.macro_calls = data.macro_calls;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
            if (!this.positions)
                this.positions = new Map();
            if (!this.macro_calls)
                this.macro_calls = new Map();
        }
        get syntax_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set syntax_version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get line_offsets() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set line_offsets(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get positions() {
            return pb_1.Message.getField(this, 4) as any as Map<number, number>;
        }
        set positions(value: Map<number, number>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get macro_calls() {
            return pb_1.Message.getField(this, 5) as any as Map<number, Expr>;
        }
        set macro_calls(value: Map<number, Expr>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get extensions() {
            return pb_1.Message.getRepeatedWrapperField(this, SourceInfo.Extension, 6) as SourceInfo.Extension[];
        }
        set extensions(value: SourceInfo.Extension[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            syntax_version?: string;
            location?: string;
            line_offsets?: number[];
            positions?: {
                [key: number]: number;
            };
            macro_calls?: {
                [key: number]: ReturnType<typeof Expr.prototype.toObject>;
            };
            extensions?: ReturnType<typeof SourceInfo.Extension.prototype.toObject>[];
        }): SourceInfo {
            const message = new SourceInfo({});
            if (data.syntax_version != null) {
                message.syntax_version = data.syntax_version;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.line_offsets != null) {
                message.line_offsets = data.line_offsets;
            }
            if (typeof data.positions == "object") {
                message.positions = new Map(Object.entries(data.positions).map(([key, value]) => [Number(key), value]));
            }
            if (typeof data.macro_calls == "object") {
                message.macro_calls = new Map(Object.entries(data.macro_calls).map(([key, value]) => [Number(key), Expr.fromObject(value)]));
            }
            if (data.extensions != null) {
                message.extensions = data.extensions.map(item => SourceInfo.Extension.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                syntax_version?: string;
                location?: string;
                line_offsets?: number[];
                positions?: {
                    [key: number]: number;
                };
                macro_calls?: {
                    [key: number]: ReturnType<typeof Expr.prototype.toObject>;
                };
                extensions?: ReturnType<typeof SourceInfo.Extension.prototype.toObject>[];
            } = {};
            if (this.syntax_version != null) {
                data.syntax_version = this.syntax_version;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.line_offsets != null) {
                data.line_offsets = this.line_offsets;
            }
            if (this.positions != null) {
                data.positions = (Object.fromEntries)(this.positions);
            }
            if (this.macro_calls != null) {
                data.macro_calls = (Object.fromEntries)((Array.from)(this.macro_calls).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.extensions != null) {
                data.extensions = this.extensions.map((item: SourceInfo.Extension) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.syntax_version.length)
                writer.writeString(1, this.syntax_version);
            if (this.location.length)
                writer.writeString(2, this.location);
            if (this.line_offsets.length)
                writer.writePackedInt32(3, this.line_offsets);
            for (const [key, value] of this.positions) {
                writer.writeMessage(4, this.positions, () => {
                    writer.writeInt64(1, key);
                    writer.writeInt32(2, value);
                });
            }
            for (const [key, value] of this.macro_calls) {
                writer.writeMessage(5, this.macro_calls, () => {
                    writer.writeInt64(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.extensions.length)
                writer.writeRepeatedMessage(6, this.extensions, (item: SourceInfo.Extension) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SourceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SourceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.syntax_version = reader.readString();
                        break;
                    case 2:
                        message.location = reader.readString();
                        break;
                    case 3:
                        message.line_offsets = reader.readPackedInt32();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.positions as any, reader, reader.readInt64, reader.readInt32));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.macro_calls as any, reader, reader.readInt64, () => {
                            let value;
                            reader.readMessage(message, () => value = Expr.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        reader.readMessage(message.extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 6, SourceInfo.Extension.deserialize(reader), SourceInfo.Extension));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SourceInfo {
            return SourceInfo.deserialize(bytes);
        }
    }
    export namespace SourceInfo {
        export class Extension extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                affected_components?: SourceInfo.Extension.Component[];
                version?: SourceInfo.Extension.Version;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("affected_components" in data && data.affected_components != undefined) {
                        this.affected_components = data.affected_components;
                    }
                    if ("version" in data && data.version != undefined) {
                        this.version = data.version;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get affected_components() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as SourceInfo.Extension.Component[];
            }
            set affected_components(value: SourceInfo.Extension.Component[]) {
                pb_1.Message.setField(this, 2, value);
            }
            get version() {
                return pb_1.Message.getWrapperField(this, SourceInfo.Extension.Version, 3) as SourceInfo.Extension.Version;
            }
            set version(value: SourceInfo.Extension.Version) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_version() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                id?: string;
                affected_components?: SourceInfo.Extension.Component[];
                version?: ReturnType<typeof SourceInfo.Extension.Version.prototype.toObject>;
            }): Extension {
                const message = new Extension({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.affected_components != null) {
                    message.affected_components = data.affected_components;
                }
                if (data.version != null) {
                    message.version = SourceInfo.Extension.Version.fromObject(data.version);
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    affected_components?: SourceInfo.Extension.Component[];
                    version?: ReturnType<typeof SourceInfo.Extension.Version.prototype.toObject>;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.affected_components != null) {
                    data.affected_components = this.affected_components;
                }
                if (this.version != null) {
                    data.version = this.version.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (this.affected_components.length)
                    writer.writePackedEnum(2, this.affected_components);
                if (this.has_version)
                    writer.writeMessage(3, this.version, () => this.version.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Extension {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Extension();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.affected_components = reader.readPackedEnum();
                            break;
                        case 3:
                            reader.readMessage(message.version, () => message.version = SourceInfo.Extension.Version.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Extension {
                return Extension.deserialize(bytes);
            }
        }
        export namespace Extension {
            export enum Component {
                COMPONENT_UNSPECIFIED = 0,
                COMPONENT_PARSER = 1,
                COMPONENT_TYPE_CHECKER = 2,
                COMPONENT_RUNTIME = 3
            }
            export class Version extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    major?: number;
                    minor?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("major" in data && data.major != undefined) {
                            this.major = data.major;
                        }
                        if ("minor" in data && data.minor != undefined) {
                            this.minor = data.minor;
                        }
                    }
                }
                get major() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set major(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get minor() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set minor(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                static fromObject(data: {
                    major?: number;
                    minor?: number;
                }): Version {
                    const message = new Version({});
                    if (data.major != null) {
                        message.major = data.major;
                    }
                    if (data.minor != null) {
                        message.minor = data.minor;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        major?: number;
                        minor?: number;
                    } = {};
                    if (this.major != null) {
                        data.major = this.major;
                    }
                    if (this.minor != null) {
                        data.minor = this.minor;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.major != 0)
                        writer.writeInt64(1, this.major);
                    if (this.minor != 0)
                        writer.writeInt64(2, this.minor);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Version {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Version();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.major = reader.readInt64();
                                break;
                            case 2:
                                message.minor = reader.readInt64();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Version {
                    return Version.deserialize(bytes);
                }
            }
        }
    }
    export class SourcePosition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            location?: string;
            offset?: number;
            line?: number;
            column?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("line" in data && data.line != undefined) {
                    this.line = data.line;
                }
                if ("column" in data && data.column != undefined) {
                    this.column = data.column;
                }
            }
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get line() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set line(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get column() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set column(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            location?: string;
            offset?: number;
            line?: number;
            column?: number;
        }): SourcePosition {
            const message = new SourcePosition({});
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.line != null) {
                message.line = data.line;
            }
            if (data.column != null) {
                message.column = data.column;
            }
            return message;
        }
        toObject() {
            const data: {
                location?: string;
                offset?: number;
                line?: number;
                column?: number;
            } = {};
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.line != null) {
                data.line = this.line;
            }
            if (this.column != null) {
                data.column = this.column;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.location.length)
                writer.writeString(1, this.location);
            if (this.offset != 0)
                writer.writeInt32(2, this.offset);
            if (this.line != 0)
                writer.writeInt32(3, this.line);
            if (this.column != 0)
                writer.writeInt32(4, this.column);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SourcePosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SourcePosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.location = reader.readString();
                        break;
                    case 2:
                        message.offset = reader.readInt32();
                        break;
                    case 3:
                        message.line = reader.readInt32();
                        break;
                    case 4:
                        message.column = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SourcePosition {
            return SourcePosition.deserialize(bytes);
        }
    }
}
