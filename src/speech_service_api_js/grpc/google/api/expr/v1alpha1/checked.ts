/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/api/expr/v1alpha1/checked.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./syntax";
import * as dependency_2 from "./../../../protobuf/empty";
import * as dependency_3 from "./../../../protobuf/struct";
import * as pb_1 from "google-protobuf";
export namespace google.api.expr.v1alpha1 {
    export class CheckedExpr extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reference_map?: Map<number, Reference>;
            type_map?: Map<number, Type>;
            source_info?: dependency_1.google.api.expr.v1alpha1.SourceInfo;
            expr_version?: string;
            expr?: dependency_1.google.api.expr.v1alpha1.Expr;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reference_map" in data && data.reference_map != undefined) {
                    this.reference_map = data.reference_map;
                }
                if ("type_map" in data && data.type_map != undefined) {
                    this.type_map = data.type_map;
                }
                if ("source_info" in data && data.source_info != undefined) {
                    this.source_info = data.source_info;
                }
                if ("expr_version" in data && data.expr_version != undefined) {
                    this.expr_version = data.expr_version;
                }
                if ("expr" in data && data.expr != undefined) {
                    this.expr = data.expr;
                }
            }
            if (!this.reference_map)
                this.reference_map = new Map();
            if (!this.type_map)
                this.type_map = new Map();
        }
        get reference_map() {
            return pb_1.Message.getField(this, 2) as any as Map<number, Reference>;
        }
        set reference_map(value: Map<number, Reference>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get type_map() {
            return pb_1.Message.getField(this, 3) as any as Map<number, Type>;
        }
        set type_map(value: Map<number, Type>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get source_info() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.api.expr.v1alpha1.SourceInfo, 5) as dependency_1.google.api.expr.v1alpha1.SourceInfo;
        }
        set source_info(value: dependency_1.google.api.expr.v1alpha1.SourceInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_source_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get expr_version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set expr_version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get expr() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.api.expr.v1alpha1.Expr, 4) as dependency_1.google.api.expr.v1alpha1.Expr;
        }
        set expr(value: dependency_1.google.api.expr.v1alpha1.Expr) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_expr() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            reference_map?: {
                [key: number]: ReturnType<typeof Reference.prototype.toObject>;
            };
            type_map?: {
                [key: number]: ReturnType<typeof Type.prototype.toObject>;
            };
            source_info?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.SourceInfo.prototype.toObject>;
            expr_version?: string;
            expr?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Expr.prototype.toObject>;
        }): CheckedExpr {
            const message = new CheckedExpr({});
            if (typeof data.reference_map == "object") {
                message.reference_map = new Map(Object.entries(data.reference_map).map(([key, value]) => [Number(key), Reference.fromObject(value)]));
            }
            if (typeof data.type_map == "object") {
                message.type_map = new Map(Object.entries(data.type_map).map(([key, value]) => [Number(key), Type.fromObject(value)]));
            }
            if (data.source_info != null) {
                message.source_info = dependency_1.google.api.expr.v1alpha1.SourceInfo.fromObject(data.source_info);
            }
            if (data.expr_version != null) {
                message.expr_version = data.expr_version;
            }
            if (data.expr != null) {
                message.expr = dependency_1.google.api.expr.v1alpha1.Expr.fromObject(data.expr);
            }
            return message;
        }
        toObject() {
            const data: {
                reference_map?: {
                    [key: number]: ReturnType<typeof Reference.prototype.toObject>;
                };
                type_map?: {
                    [key: number]: ReturnType<typeof Type.prototype.toObject>;
                };
                source_info?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.SourceInfo.prototype.toObject>;
                expr_version?: string;
                expr?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Expr.prototype.toObject>;
            } = {};
            if (this.reference_map != null) {
                data.reference_map = (Object.fromEntries)((Array.from)(this.reference_map).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.type_map != null) {
                data.type_map = (Object.fromEntries)((Array.from)(this.type_map).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.source_info != null) {
                data.source_info = this.source_info.toObject();
            }
            if (this.expr_version != null) {
                data.expr_version = this.expr_version;
            }
            if (this.expr != null) {
                data.expr = this.expr.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.reference_map) {
                writer.writeMessage(2, this.reference_map, () => {
                    writer.writeInt64(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.type_map) {
                writer.writeMessage(3, this.type_map, () => {
                    writer.writeInt64(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.has_source_info)
                writer.writeMessage(5, this.source_info, () => this.source_info.serialize(writer));
            if (this.expr_version.length)
                writer.writeString(6, this.expr_version);
            if (this.has_expr)
                writer.writeMessage(4, this.expr, () => this.expr.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckedExpr {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckedExpr();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.reference_map as any, reader, reader.readInt64, () => {
                            let value;
                            reader.readMessage(message, () => value = Reference.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.type_map as any, reader, reader.readInt64, () => {
                            let value;
                            reader.readMessage(message, () => value = Type.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 5:
                        reader.readMessage(message.source_info, () => message.source_info = dependency_1.google.api.expr.v1alpha1.SourceInfo.deserialize(reader));
                        break;
                    case 6:
                        message.expr_version = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.expr, () => message.expr = dependency_1.google.api.expr.v1alpha1.Expr.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckedExpr {
            return CheckedExpr.deserialize(bytes);
        }
    }
    export class Type extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14]];
        constructor(data?: any[] | ({} & (({
            dyn?: dependency_2.google.protobuf.Empty;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: dependency_3.google.protobuf.NullValue;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: Type.PrimitiveType;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: Type.PrimitiveType;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: Type.WellKnownType;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: Type.ListType;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: Type.MapType;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: Type.FunctionType;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: string;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: string;
            type?: never;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: Type;
            error?: never;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: dependency_2.google.protobuf.Empty;
            abstract_type?: never;
        } | {
            dyn?: never;
            null?: never;
            primitive?: never;
            wrapper?: never;
            well_known?: never;
            list_type?: never;
            map_type?: never;
            function?: never;
            message_type?: never;
            type_param?: never;
            type?: never;
            error?: never;
            abstract_type?: Type.AbstractType;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dyn" in data && data.dyn != undefined) {
                    this.dyn = data.dyn;
                }
                if ("null" in data && data.null != undefined) {
                    this.null = data.null;
                }
                if ("primitive" in data && data.primitive != undefined) {
                    this.primitive = data.primitive;
                }
                if ("wrapper" in data && data.wrapper != undefined) {
                    this.wrapper = data.wrapper;
                }
                if ("well_known" in data && data.well_known != undefined) {
                    this.well_known = data.well_known;
                }
                if ("list_type" in data && data.list_type != undefined) {
                    this.list_type = data.list_type;
                }
                if ("map_type" in data && data.map_type != undefined) {
                    this.map_type = data.map_type;
                }
                if ("function" in data && data.function != undefined) {
                    this.function = data.function;
                }
                if ("message_type" in data && data.message_type != undefined) {
                    this.message_type = data.message_type;
                }
                if ("type_param" in data && data.type_param != undefined) {
                    this.type_param = data.type_param;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("abstract_type" in data && data.abstract_type != undefined) {
                    this.abstract_type = data.abstract_type;
                }
            }
        }
        get dyn() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Empty, 1) as dependency_2.google.protobuf.Empty;
        }
        set dyn(value: dependency_2.google.protobuf.Empty) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_dyn() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get null() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_3.google.protobuf.NullValue.NULL_VALUE) as dependency_3.google.protobuf.NullValue;
        }
        set null(value: dependency_3.google.protobuf.NullValue) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_null() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get primitive() {
            return pb_1.Message.getFieldWithDefault(this, 3, Type.PrimitiveType.PRIMITIVE_TYPE_UNSPECIFIED) as Type.PrimitiveType;
        }
        set primitive(value: Type.PrimitiveType) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_primitive() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get wrapper() {
            return pb_1.Message.getFieldWithDefault(this, 4, Type.PrimitiveType.PRIMITIVE_TYPE_UNSPECIFIED) as Type.PrimitiveType;
        }
        set wrapper(value: Type.PrimitiveType) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_wrapper() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get well_known() {
            return pb_1.Message.getFieldWithDefault(this, 5, Type.WellKnownType.WELL_KNOWN_TYPE_UNSPECIFIED) as Type.WellKnownType;
        }
        set well_known(value: Type.WellKnownType) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_well_known() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get list_type() {
            return pb_1.Message.getWrapperField(this, Type.ListType, 6) as Type.ListType;
        }
        set list_type(value: Type.ListType) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_list_type() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get map_type() {
            return pb_1.Message.getWrapperField(this, Type.MapType, 7) as Type.MapType;
        }
        set map_type(value: Type.MapType) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_map_type() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get function() {
            return pb_1.Message.getWrapperField(this, Type.FunctionType, 8) as Type.FunctionType;
        }
        set function(value: Type.FunctionType) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_function() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get message_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set message_type(value: string) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[0], value);
        }
        get has_message_type() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get type_param() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set type_param(value: string) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[0], value);
        }
        get has_type_param() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get type() {
            return pb_1.Message.getWrapperField(this, Type, 11) as Type;
        }
        set type(value: Type) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Empty, 12) as dependency_2.google.protobuf.Empty;
        }
        set error(value: dependency_2.google.protobuf.Empty) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get abstract_type() {
            return pb_1.Message.getWrapperField(this, Type.AbstractType, 14) as Type.AbstractType;
        }
        set abstract_type(value: Type.AbstractType) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_abstract_type() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get type_kind() {
            const cases: {
                [index: number]: "none" | "dyn" | "null" | "primitive" | "wrapper" | "well_known" | "list_type" | "map_type" | "function" | "message_type" | "type_param" | "type" | "error" | "abstract_type";
            } = {
                0: "none",
                1: "dyn",
                2: "null",
                3: "primitive",
                4: "wrapper",
                5: "well_known",
                6: "list_type",
                7: "map_type",
                8: "function",
                9: "message_type",
                10: "type_param",
                11: "type",
                12: "error",
                14: "abstract_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14])];
        }
        static fromObject(data: {
            dyn?: ReturnType<typeof dependency_2.google.protobuf.Empty.prototype.toObject>;
            null?: dependency_3.google.protobuf.NullValue;
            primitive?: Type.PrimitiveType;
            wrapper?: Type.PrimitiveType;
            well_known?: Type.WellKnownType;
            list_type?: ReturnType<typeof Type.ListType.prototype.toObject>;
            map_type?: ReturnType<typeof Type.MapType.prototype.toObject>;
            function?: ReturnType<typeof Type.FunctionType.prototype.toObject>;
            message_type?: string;
            type_param?: string;
            type?: ReturnType<typeof Type.prototype.toObject>;
            error?: ReturnType<typeof dependency_2.google.protobuf.Empty.prototype.toObject>;
            abstract_type?: ReturnType<typeof Type.AbstractType.prototype.toObject>;
        }): Type {
            const message = new Type({});
            if (data.dyn != null) {
                message.dyn = dependency_2.google.protobuf.Empty.fromObject(data.dyn);
            }
            if (data.null != null) {
                message.null = data.null;
            }
            if (data.primitive != null) {
                message.primitive = data.primitive;
            }
            if (data.wrapper != null) {
                message.wrapper = data.wrapper;
            }
            if (data.well_known != null) {
                message.well_known = data.well_known;
            }
            if (data.list_type != null) {
                message.list_type = Type.ListType.fromObject(data.list_type);
            }
            if (data.map_type != null) {
                message.map_type = Type.MapType.fromObject(data.map_type);
            }
            if (data.function != null) {
                message.function = Type.FunctionType.fromObject(data.function);
            }
            if (data.message_type != null) {
                message.message_type = data.message_type;
            }
            if (data.type_param != null) {
                message.type_param = data.type_param;
            }
            if (data.type != null) {
                message.type = Type.fromObject(data.type);
            }
            if (data.error != null) {
                message.error = dependency_2.google.protobuf.Empty.fromObject(data.error);
            }
            if (data.abstract_type != null) {
                message.abstract_type = Type.AbstractType.fromObject(data.abstract_type);
            }
            return message;
        }
        toObject() {
            const data: {
                dyn?: ReturnType<typeof dependency_2.google.protobuf.Empty.prototype.toObject>;
                null?: dependency_3.google.protobuf.NullValue;
                primitive?: Type.PrimitiveType;
                wrapper?: Type.PrimitiveType;
                well_known?: Type.WellKnownType;
                list_type?: ReturnType<typeof Type.ListType.prototype.toObject>;
                map_type?: ReturnType<typeof Type.MapType.prototype.toObject>;
                function?: ReturnType<typeof Type.FunctionType.prototype.toObject>;
                message_type?: string;
                type_param?: string;
                type?: ReturnType<typeof Type.prototype.toObject>;
                error?: ReturnType<typeof dependency_2.google.protobuf.Empty.prototype.toObject>;
                abstract_type?: ReturnType<typeof Type.AbstractType.prototype.toObject>;
            } = {};
            if (this.dyn != null) {
                data.dyn = this.dyn.toObject();
            }
            if (this.null != null) {
                data.null = this.null;
            }
            if (this.primitive != null) {
                data.primitive = this.primitive;
            }
            if (this.wrapper != null) {
                data.wrapper = this.wrapper;
            }
            if (this.well_known != null) {
                data.well_known = this.well_known;
            }
            if (this.list_type != null) {
                data.list_type = this.list_type.toObject();
            }
            if (this.map_type != null) {
                data.map_type = this.map_type.toObject();
            }
            if (this.function != null) {
                data.function = this.function.toObject();
            }
            if (this.message_type != null) {
                data.message_type = this.message_type;
            }
            if (this.type_param != null) {
                data.type_param = this.type_param;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.abstract_type != null) {
                data.abstract_type = this.abstract_type.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_dyn)
                writer.writeMessage(1, this.dyn, () => this.dyn.serialize(writer));
            if (this.has_null)
                writer.writeEnum(2, this.null);
            if (this.has_primitive)
                writer.writeEnum(3, this.primitive);
            if (this.has_wrapper)
                writer.writeEnum(4, this.wrapper);
            if (this.has_well_known)
                writer.writeEnum(5, this.well_known);
            if (this.has_list_type)
                writer.writeMessage(6, this.list_type, () => this.list_type.serialize(writer));
            if (this.has_map_type)
                writer.writeMessage(7, this.map_type, () => this.map_type.serialize(writer));
            if (this.has_function)
                writer.writeMessage(8, this.function, () => this.function.serialize(writer));
            if (this.has_message_type)
                writer.writeString(9, this.message_type);
            if (this.has_type_param)
                writer.writeString(10, this.type_param);
            if (this.has_type)
                writer.writeMessage(11, this.type, () => this.type.serialize(writer));
            if (this.has_error)
                writer.writeMessage(12, this.error, () => this.error.serialize(writer));
            if (this.has_abstract_type)
                writer.writeMessage(14, this.abstract_type, () => this.abstract_type.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Type {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Type();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.dyn, () => message.dyn = dependency_2.google.protobuf.Empty.deserialize(reader));
                        break;
                    case 2:
                        message.null = reader.readEnum();
                        break;
                    case 3:
                        message.primitive = reader.readEnum();
                        break;
                    case 4:
                        message.wrapper = reader.readEnum();
                        break;
                    case 5:
                        message.well_known = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.list_type, () => message.list_type = Type.ListType.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.map_type, () => message.map_type = Type.MapType.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.function, () => message.function = Type.FunctionType.deserialize(reader));
                        break;
                    case 9:
                        message.message_type = reader.readString();
                        break;
                    case 10:
                        message.type_param = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.type, () => message.type = Type.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.error, () => message.error = dependency_2.google.protobuf.Empty.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.abstract_type, () => message.abstract_type = Type.AbstractType.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Type {
            return Type.deserialize(bytes);
        }
    }
    export namespace Type {
        export enum PrimitiveType {
            PRIMITIVE_TYPE_UNSPECIFIED = 0,
            BOOL = 1,
            INT64 = 2,
            UINT64 = 3,
            DOUBLE = 4,
            STRING = 5,
            BYTES = 6
        }
        export enum WellKnownType {
            WELL_KNOWN_TYPE_UNSPECIFIED = 0,
            ANY = 1,
            TIMESTAMP = 2,
            DURATION = 3
        }
        export class ListType extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                elem_type?: Type;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("elem_type" in data && data.elem_type != undefined) {
                        this.elem_type = data.elem_type;
                    }
                }
            }
            get elem_type() {
                return pb_1.Message.getWrapperField(this, Type, 1) as Type;
            }
            set elem_type(value: Type) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_elem_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                elem_type?: ReturnType<typeof Type.prototype.toObject>;
            }): ListType {
                const message = new ListType({});
                if (data.elem_type != null) {
                    message.elem_type = Type.fromObject(data.elem_type);
                }
                return message;
            }
            toObject() {
                const data: {
                    elem_type?: ReturnType<typeof Type.prototype.toObject>;
                } = {};
                if (this.elem_type != null) {
                    data.elem_type = this.elem_type.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_elem_type)
                    writer.writeMessage(1, this.elem_type, () => this.elem_type.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListType {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListType();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.elem_type, () => message.elem_type = Type.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ListType {
                return ListType.deserialize(bytes);
            }
        }
        export class MapType extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                key_type?: Type;
                value_type?: Type;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("key_type" in data && data.key_type != undefined) {
                        this.key_type = data.key_type;
                    }
                    if ("value_type" in data && data.value_type != undefined) {
                        this.value_type = data.value_type;
                    }
                }
            }
            get key_type() {
                return pb_1.Message.getWrapperField(this, Type, 1) as Type;
            }
            set key_type(value: Type) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_key_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get value_type() {
                return pb_1.Message.getWrapperField(this, Type, 2) as Type;
            }
            set value_type(value: Type) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_value_type() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                key_type?: ReturnType<typeof Type.prototype.toObject>;
                value_type?: ReturnType<typeof Type.prototype.toObject>;
            }): MapType {
                const message = new MapType({});
                if (data.key_type != null) {
                    message.key_type = Type.fromObject(data.key_type);
                }
                if (data.value_type != null) {
                    message.value_type = Type.fromObject(data.value_type);
                }
                return message;
            }
            toObject() {
                const data: {
                    key_type?: ReturnType<typeof Type.prototype.toObject>;
                    value_type?: ReturnType<typeof Type.prototype.toObject>;
                } = {};
                if (this.key_type != null) {
                    data.key_type = this.key_type.toObject();
                }
                if (this.value_type != null) {
                    data.value_type = this.value_type.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_key_type)
                    writer.writeMessage(1, this.key_type, () => this.key_type.serialize(writer));
                if (this.has_value_type)
                    writer.writeMessage(2, this.value_type, () => this.value_type.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MapType {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MapType();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.key_type, () => message.key_type = Type.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.value_type, () => message.value_type = Type.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MapType {
                return MapType.deserialize(bytes);
            }
        }
        export class FunctionType extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                result_type?: Type;
                arg_types?: Type[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("result_type" in data && data.result_type != undefined) {
                        this.result_type = data.result_type;
                    }
                    if ("arg_types" in data && data.arg_types != undefined) {
                        this.arg_types = data.arg_types;
                    }
                }
            }
            get result_type() {
                return pb_1.Message.getWrapperField(this, Type, 1) as Type;
            }
            set result_type(value: Type) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_result_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get arg_types() {
                return pb_1.Message.getRepeatedWrapperField(this, Type, 2) as Type[];
            }
            set arg_types(value: Type[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                result_type?: ReturnType<typeof Type.prototype.toObject>;
                arg_types?: ReturnType<typeof Type.prototype.toObject>[];
            }): FunctionType {
                const message = new FunctionType({});
                if (data.result_type != null) {
                    message.result_type = Type.fromObject(data.result_type);
                }
                if (data.arg_types != null) {
                    message.arg_types = data.arg_types.map(item => Type.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    result_type?: ReturnType<typeof Type.prototype.toObject>;
                    arg_types?: ReturnType<typeof Type.prototype.toObject>[];
                } = {};
                if (this.result_type != null) {
                    data.result_type = this.result_type.toObject();
                }
                if (this.arg_types != null) {
                    data.arg_types = this.arg_types.map((item: Type) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_result_type)
                    writer.writeMessage(1, this.result_type, () => this.result_type.serialize(writer));
                if (this.arg_types.length)
                    writer.writeRepeatedMessage(2, this.arg_types, (item: Type) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionType {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionType();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.result_type, () => message.result_type = Type.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.arg_types, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Type.deserialize(reader), Type));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FunctionType {
                return FunctionType.deserialize(bytes);
            }
        }
        export class AbstractType extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
                parameter_types?: Type[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("parameter_types" in data && data.parameter_types != undefined) {
                        this.parameter_types = data.parameter_types;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get parameter_types() {
                return pb_1.Message.getRepeatedWrapperField(this, Type, 2) as Type[];
            }
            set parameter_types(value: Type[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                name?: string;
                parameter_types?: ReturnType<typeof Type.prototype.toObject>[];
            }): AbstractType {
                const message = new AbstractType({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.parameter_types != null) {
                    message.parameter_types = data.parameter_types.map(item => Type.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    parameter_types?: ReturnType<typeof Type.prototype.toObject>[];
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.parameter_types != null) {
                    data.parameter_types = this.parameter_types.map((item: Type) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (this.parameter_types.length)
                    writer.writeRepeatedMessage(2, this.parameter_types, (item: Type) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AbstractType {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AbstractType();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.parameter_types, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Type.deserialize(reader), Type));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AbstractType {
                return AbstractType.deserialize(bytes);
            }
        }
    }
    export class Decl extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            name?: string;
        } & (({
            ident?: Decl.IdentDecl;
            function?: never;
        } | {
            ident?: never;
            function?: Decl.FunctionDecl;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("ident" in data && data.ident != undefined) {
                    this.ident = data.ident;
                }
                if ("function" in data && data.function != undefined) {
                    this.function = data.function;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ident() {
            return pb_1.Message.getWrapperField(this, Decl.IdentDecl, 2) as Decl.IdentDecl;
        }
        set ident(value: Decl.IdentDecl) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_ident() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get function() {
            return pb_1.Message.getWrapperField(this, Decl.FunctionDecl, 3) as Decl.FunctionDecl;
        }
        set function(value: Decl.FunctionDecl) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_function() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get decl_kind() {
            const cases: {
                [index: number]: "none" | "ident" | "function";
            } = {
                0: "none",
                2: "ident",
                3: "function"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            name?: string;
            ident?: ReturnType<typeof Decl.IdentDecl.prototype.toObject>;
            function?: ReturnType<typeof Decl.FunctionDecl.prototype.toObject>;
        }): Decl {
            const message = new Decl({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.ident != null) {
                message.ident = Decl.IdentDecl.fromObject(data.ident);
            }
            if (data.function != null) {
                message.function = Decl.FunctionDecl.fromObject(data.function);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                ident?: ReturnType<typeof Decl.IdentDecl.prototype.toObject>;
                function?: ReturnType<typeof Decl.FunctionDecl.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.ident != null) {
                data.ident = this.ident.toObject();
            }
            if (this.function != null) {
                data.function = this.function.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_ident)
                writer.writeMessage(2, this.ident, () => this.ident.serialize(writer));
            if (this.has_function)
                writer.writeMessage(3, this.function, () => this.function.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Decl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Decl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.ident, () => message.ident = Decl.IdentDecl.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.function, () => message.function = Decl.FunctionDecl.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Decl {
            return Decl.deserialize(bytes);
        }
    }
    export namespace Decl {
        export class IdentDecl extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                type?: Type;
                value?: dependency_1.google.api.expr.v1alpha1.Constant;
                doc?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                    if ("doc" in data && data.doc != undefined) {
                        this.doc = data.doc;
                    }
                }
            }
            get type() {
                return pb_1.Message.getWrapperField(this, Type, 1) as Type;
            }
            set type(value: Type) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get value() {
                return pb_1.Message.getWrapperField(this, dependency_1.google.api.expr.v1alpha1.Constant, 2) as dependency_1.google.api.expr.v1alpha1.Constant;
            }
            set value(value: dependency_1.google.api.expr.v1alpha1.Constant) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_value() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get doc() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set doc(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                type?: ReturnType<typeof Type.prototype.toObject>;
                value?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Constant.prototype.toObject>;
                doc?: string;
            }): IdentDecl {
                const message = new IdentDecl({});
                if (data.type != null) {
                    message.type = Type.fromObject(data.type);
                }
                if (data.value != null) {
                    message.value = dependency_1.google.api.expr.v1alpha1.Constant.fromObject(data.value);
                }
                if (data.doc != null) {
                    message.doc = data.doc;
                }
                return message;
            }
            toObject() {
                const data: {
                    type?: ReturnType<typeof Type.prototype.toObject>;
                    value?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Constant.prototype.toObject>;
                    doc?: string;
                } = {};
                if (this.type != null) {
                    data.type = this.type.toObject();
                }
                if (this.value != null) {
                    data.value = this.value.toObject();
                }
                if (this.doc != null) {
                    data.doc = this.doc;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_type)
                    writer.writeMessage(1, this.type, () => this.type.serialize(writer));
                if (this.has_value)
                    writer.writeMessage(2, this.value, () => this.value.serialize(writer));
                if (this.doc.length)
                    writer.writeString(3, this.doc);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentDecl {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdentDecl();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.type, () => message.type = Type.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.value, () => message.value = dependency_1.google.api.expr.v1alpha1.Constant.deserialize(reader));
                            break;
                        case 3:
                            message.doc = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): IdentDecl {
                return IdentDecl.deserialize(bytes);
            }
        }
        export class FunctionDecl extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                overloads?: Decl.FunctionDecl.Overload[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("overloads" in data && data.overloads != undefined) {
                        this.overloads = data.overloads;
                    }
                }
            }
            get overloads() {
                return pb_1.Message.getRepeatedWrapperField(this, Decl.FunctionDecl.Overload, 1) as Decl.FunctionDecl.Overload[];
            }
            set overloads(value: Decl.FunctionDecl.Overload[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                overloads?: ReturnType<typeof Decl.FunctionDecl.Overload.prototype.toObject>[];
            }): FunctionDecl {
                const message = new FunctionDecl({});
                if (data.overloads != null) {
                    message.overloads = data.overloads.map(item => Decl.FunctionDecl.Overload.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    overloads?: ReturnType<typeof Decl.FunctionDecl.Overload.prototype.toObject>[];
                } = {};
                if (this.overloads != null) {
                    data.overloads = this.overloads.map((item: Decl.FunctionDecl.Overload) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.overloads.length)
                    writer.writeRepeatedMessage(1, this.overloads, (item: Decl.FunctionDecl.Overload) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionDecl {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionDecl();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.overloads, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Decl.FunctionDecl.Overload.deserialize(reader), Decl.FunctionDecl.Overload));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FunctionDecl {
                return FunctionDecl.deserialize(bytes);
            }
        }
        export namespace FunctionDecl {
            export class Overload extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    overload_id?: string;
                    params?: Type[];
                    type_params?: string[];
                    result_type?: Type;
                    is_instance_function?: boolean;
                    doc?: string;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("overload_id" in data && data.overload_id != undefined) {
                            this.overload_id = data.overload_id;
                        }
                        if ("params" in data && data.params != undefined) {
                            this.params = data.params;
                        }
                        if ("type_params" in data && data.type_params != undefined) {
                            this.type_params = data.type_params;
                        }
                        if ("result_type" in data && data.result_type != undefined) {
                            this.result_type = data.result_type;
                        }
                        if ("is_instance_function" in data && data.is_instance_function != undefined) {
                            this.is_instance_function = data.is_instance_function;
                        }
                        if ("doc" in data && data.doc != undefined) {
                            this.doc = data.doc;
                        }
                    }
                }
                get overload_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set overload_id(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get params() {
                    return pb_1.Message.getRepeatedWrapperField(this, Type, 2) as Type[];
                }
                set params(value: Type[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 2, value);
                }
                get type_params() {
                    return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
                }
                set type_params(value: string[]) {
                    pb_1.Message.setField(this, 3, value);
                }
                get result_type() {
                    return pb_1.Message.getWrapperField(this, Type, 4) as Type;
                }
                set result_type(value: Type) {
                    pb_1.Message.setWrapperField(this, 4, value);
                }
                get has_result_type() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                get is_instance_function() {
                    return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
                }
                set is_instance_function(value: boolean) {
                    pb_1.Message.setField(this, 5, value);
                }
                get doc() {
                    return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
                }
                set doc(value: string) {
                    pb_1.Message.setField(this, 6, value);
                }
                static fromObject(data: {
                    overload_id?: string;
                    params?: ReturnType<typeof Type.prototype.toObject>[];
                    type_params?: string[];
                    result_type?: ReturnType<typeof Type.prototype.toObject>;
                    is_instance_function?: boolean;
                    doc?: string;
                }): Overload {
                    const message = new Overload({});
                    if (data.overload_id != null) {
                        message.overload_id = data.overload_id;
                    }
                    if (data.params != null) {
                        message.params = data.params.map(item => Type.fromObject(item));
                    }
                    if (data.type_params != null) {
                        message.type_params = data.type_params;
                    }
                    if (data.result_type != null) {
                        message.result_type = Type.fromObject(data.result_type);
                    }
                    if (data.is_instance_function != null) {
                        message.is_instance_function = data.is_instance_function;
                    }
                    if (data.doc != null) {
                        message.doc = data.doc;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        overload_id?: string;
                        params?: ReturnType<typeof Type.prototype.toObject>[];
                        type_params?: string[];
                        result_type?: ReturnType<typeof Type.prototype.toObject>;
                        is_instance_function?: boolean;
                        doc?: string;
                    } = {};
                    if (this.overload_id != null) {
                        data.overload_id = this.overload_id;
                    }
                    if (this.params != null) {
                        data.params = this.params.map((item: Type) => item.toObject());
                    }
                    if (this.type_params != null) {
                        data.type_params = this.type_params;
                    }
                    if (this.result_type != null) {
                        data.result_type = this.result_type.toObject();
                    }
                    if (this.is_instance_function != null) {
                        data.is_instance_function = this.is_instance_function;
                    }
                    if (this.doc != null) {
                        data.doc = this.doc;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.overload_id.length)
                        writer.writeString(1, this.overload_id);
                    if (this.params.length)
                        writer.writeRepeatedMessage(2, this.params, (item: Type) => item.serialize(writer));
                    if (this.type_params.length)
                        writer.writeRepeatedString(3, this.type_params);
                    if (this.has_result_type)
                        writer.writeMessage(4, this.result_type, () => this.result_type.serialize(writer));
                    if (this.is_instance_function != false)
                        writer.writeBool(5, this.is_instance_function);
                    if (this.doc.length)
                        writer.writeString(6, this.doc);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Overload {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Overload();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.overload_id = reader.readString();
                                break;
                            case 2:
                                reader.readMessage(message.params, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Type.deserialize(reader), Type));
                                break;
                            case 3:
                                pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                                break;
                            case 4:
                                reader.readMessage(message.result_type, () => message.result_type = Type.deserialize(reader));
                                break;
                            case 5:
                                message.is_instance_function = reader.readBool();
                                break;
                            case 6:
                                message.doc = reader.readString();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Overload {
                    return Overload.deserialize(bytes);
                }
            }
        }
    }
    export class Reference extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            overload_id?: string[];
            value?: dependency_1.google.api.expr.v1alpha1.Constant;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("overload_id" in data && data.overload_id != undefined) {
                    this.overload_id = data.overload_id;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get overload_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set overload_id(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.api.expr.v1alpha1.Constant, 4) as dependency_1.google.api.expr.v1alpha1.Constant;
        }
        set value(value: dependency_1.google.api.expr.v1alpha1.Constant) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            name?: string;
            overload_id?: string[];
            value?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Constant.prototype.toObject>;
        }): Reference {
            const message = new Reference({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.overload_id != null) {
                message.overload_id = data.overload_id;
            }
            if (data.value != null) {
                message.value = dependency_1.google.api.expr.v1alpha1.Constant.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                overload_id?: string[];
                value?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Constant.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.overload_id != null) {
                data.overload_id = this.overload_id;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.overload_id.length)
                writer.writeRepeatedString(3, this.overload_id);
            if (this.has_value)
                writer.writeMessage(4, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reference {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reference();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.value, () => message.value = dependency_1.google.api.expr.v1alpha1.Constant.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reference {
            return Reference.deserialize(bytes);
        }
    }
}
