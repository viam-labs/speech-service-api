/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/api/expr/v1alpha1/eval.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./value";
import * as dependency_2 from "./../../../rpc/status";
import * as pb_1 from "google-protobuf";
export namespace google.api.expr.v1alpha1 {
    export class EvalState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: ExprValue[];
            results?: EvalState.Result[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
            }
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, ExprValue, 1) as ExprValue[];
        }
        set values(value: ExprValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get results() {
            return pb_1.Message.getRepeatedWrapperField(this, EvalState.Result, 3) as EvalState.Result[];
        }
        set results(value: EvalState.Result[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            values?: ReturnType<typeof ExprValue.prototype.toObject>[];
            results?: ReturnType<typeof EvalState.Result.prototype.toObject>[];
        }): EvalState {
            const message = new EvalState({});
            if (data.values != null) {
                message.values = data.values.map(item => ExprValue.fromObject(item));
            }
            if (data.results != null) {
                message.results = data.results.map(item => EvalState.Result.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                values?: ReturnType<typeof ExprValue.prototype.toObject>[];
                results?: ReturnType<typeof EvalState.Result.prototype.toObject>[];
            } = {};
            if (this.values != null) {
                data.values = this.values.map((item: ExprValue) => item.toObject());
            }
            if (this.results != null) {
                data.results = this.results.map((item: EvalState.Result) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writeRepeatedMessage(1, this.values, (item: ExprValue) => item.serialize(writer));
            if (this.results.length)
                writer.writeRepeatedMessage(3, this.results, (item: EvalState.Result) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EvalState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EvalState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ExprValue.deserialize(reader), ExprValue));
                        break;
                    case 3:
                        reader.readMessage(message.results, () => pb_1.Message.addToRepeatedWrapperField(message, 3, EvalState.Result.deserialize(reader), EvalState.Result));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EvalState {
            return EvalState.deserialize(bytes);
        }
    }
    export namespace EvalState {
        export class Result extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                expr?: number;
                value?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("expr" in data && data.expr != undefined) {
                        this.expr = data.expr;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                }
            }
            get expr() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set expr(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get value() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set value(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                expr?: number;
                value?: number;
            }): Result {
                const message = new Result({});
                if (data.expr != null) {
                    message.expr = data.expr;
                }
                if (data.value != null) {
                    message.value = data.value;
                }
                return message;
            }
            toObject() {
                const data: {
                    expr?: number;
                    value?: number;
                } = {};
                if (this.expr != null) {
                    data.expr = this.expr;
                }
                if (this.value != null) {
                    data.value = this.value;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.expr != 0)
                    writer.writeInt64(1, this.expr);
                if (this.value != 0)
                    writer.writeInt64(2, this.value);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.expr = reader.readInt64();
                            break;
                        case 2:
                            message.value = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Result {
                return Result.deserialize(bytes);
            }
        }
    }
    export class ExprValue extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            value?: dependency_1.google.api.expr.v1alpha1.Value;
            error?: never;
            unknown?: never;
        } | {
            value?: never;
            error?: ErrorSet;
            unknown?: never;
        } | {
            value?: never;
            error?: never;
            unknown?: UnknownSet;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("unknown" in data && data.unknown != undefined) {
                    this.unknown = data.unknown;
                }
            }
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.api.expr.v1alpha1.Value, 1) as dependency_1.google.api.expr.v1alpha1.Value;
        }
        set value(value: dependency_1.google.api.expr.v1alpha1.Value) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorSet, 2) as ErrorSet;
        }
        set error(value: ErrorSet) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get unknown() {
            return pb_1.Message.getWrapperField(this, UnknownSet, 3) as UnknownSet;
        }
        set unknown(value: UnknownSet) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_unknown() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "value" | "error" | "unknown";
            } = {
                0: "none",
                1: "value",
                2: "error",
                3: "unknown"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            value?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Value.prototype.toObject>;
            error?: ReturnType<typeof ErrorSet.prototype.toObject>;
            unknown?: ReturnType<typeof UnknownSet.prototype.toObject>;
        }): ExprValue {
            const message = new ExprValue({});
            if (data.value != null) {
                message.value = dependency_1.google.api.expr.v1alpha1.Value.fromObject(data.value);
            }
            if (data.error != null) {
                message.error = ErrorSet.fromObject(data.error);
            }
            if (data.unknown != null) {
                message.unknown = UnknownSet.fromObject(data.unknown);
            }
            return message;
        }
        toObject() {
            const data: {
                value?: ReturnType<typeof dependency_1.google.api.expr.v1alpha1.Value.prototype.toObject>;
                error?: ReturnType<typeof ErrorSet.prototype.toObject>;
                unknown?: ReturnType<typeof UnknownSet.prototype.toObject>;
            } = {};
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.unknown != null) {
                data.unknown = this.unknown.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_value)
                writer.writeMessage(1, this.value, () => this.value.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (this.has_unknown)
                writer.writeMessage(3, this.unknown, () => this.unknown.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExprValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExprValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.value, () => message.value = dependency_1.google.api.expr.v1alpha1.Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = ErrorSet.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.unknown, () => message.unknown = UnknownSet.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExprValue {
            return ExprValue.deserialize(bytes);
        }
    }
    export class ErrorSet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errors?: dependency_2.google.rpc.Status[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errors" in data && data.errors != undefined) {
                    this.errors = data.errors;
                }
            }
        }
        get errors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.google.rpc.Status, 1) as dependency_2.google.rpc.Status[];
        }
        set errors(value: dependency_2.google.rpc.Status[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            errors?: ReturnType<typeof dependency_2.google.rpc.Status.prototype.toObject>[];
        }): ErrorSet {
            const message = new ErrorSet({});
            if (data.errors != null) {
                message.errors = data.errors.map(item => dependency_2.google.rpc.Status.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                errors?: ReturnType<typeof dependency_2.google.rpc.Status.prototype.toObject>[];
            } = {};
            if (this.errors != null) {
                data.errors = this.errors.map((item: dependency_2.google.rpc.Status) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errors.length)
                writer.writeRepeatedMessage(1, this.errors, (item: dependency_2.google.rpc.Status) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.errors, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.google.rpc.Status.deserialize(reader), dependency_2.google.rpc.Status));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorSet {
            return ErrorSet.deserialize(bytes);
        }
    }
    export class UnknownSet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            exprs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exprs" in data && data.exprs != undefined) {
                    this.exprs = data.exprs;
                }
            }
        }
        get exprs() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set exprs(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            exprs?: number[];
        }): UnknownSet {
            const message = new UnknownSet({});
            if (data.exprs != null) {
                message.exprs = data.exprs;
            }
            return message;
        }
        toObject() {
            const data: {
                exprs?: number[];
            } = {};
            if (this.exprs != null) {
                data.exprs = this.exprs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.exprs.length)
                writer.writePackedInt64(1, this.exprs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnknownSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnknownSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.exprs = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnknownSet {
            return UnknownSet.deserialize(bytes);
        }
    }
}
