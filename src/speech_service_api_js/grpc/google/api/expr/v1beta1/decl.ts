/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/api/expr/v1beta1/decl.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./expr";
import * as pb_1 from "google-protobuf";
export namespace google.api.expr.v1beta1 {
    export class Decl extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5]];
        constructor(data?: any[] | ({
            id?: number;
            name?: string;
            doc?: string;
        } & (({
            ident?: IdentDecl;
            function?: never;
        } | {
            ident?: never;
            function?: FunctionDecl;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("doc" in data && data.doc != undefined) {
                    this.doc = data.doc;
                }
                if ("ident" in data && data.ident != undefined) {
                    this.ident = data.ident;
                }
                if ("function" in data && data.function != undefined) {
                    this.function = data.function;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get doc() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set doc(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ident() {
            return pb_1.Message.getWrapperField(this, IdentDecl, 4) as IdentDecl;
        }
        set ident(value: IdentDecl) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_ident() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get function() {
            return pb_1.Message.getWrapperField(this, FunctionDecl, 5) as FunctionDecl;
        }
        set function(value: FunctionDecl) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_function() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "ident" | "function";
            } = {
                0: "none",
                4: "ident",
                5: "function"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5])];
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            doc?: string;
            ident?: ReturnType<typeof IdentDecl.prototype.toObject>;
            function?: ReturnType<typeof FunctionDecl.prototype.toObject>;
        }): Decl {
            const message = new Decl({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.doc != null) {
                message.doc = data.doc;
            }
            if (data.ident != null) {
                message.ident = IdentDecl.fromObject(data.ident);
            }
            if (data.function != null) {
                message.function = FunctionDecl.fromObject(data.function);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                doc?: string;
                ident?: ReturnType<typeof IdentDecl.prototype.toObject>;
                function?: ReturnType<typeof FunctionDecl.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.doc != null) {
                data.doc = this.doc;
            }
            if (this.ident != null) {
                data.ident = this.ident.toObject();
            }
            if (this.function != null) {
                data.function = this.function.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.doc.length)
                writer.writeString(3, this.doc);
            if (this.has_ident)
                writer.writeMessage(4, this.ident, () => this.ident.serialize(writer));
            if (this.has_function)
                writer.writeMessage(5, this.function, () => this.function.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Decl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Decl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.doc = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.ident, () => message.ident = IdentDecl.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.function, () => message.function = FunctionDecl.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Decl {
            return Decl.deserialize(bytes);
        }
    }
    export class DeclType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            type?: string;
            type_params?: DeclType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("type_params" in data && data.type_params != undefined) {
                    this.type_params = data.type_params;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type_params() {
            return pb_1.Message.getRepeatedWrapperField(this, DeclType, 4) as DeclType[];
        }
        set type_params(value: DeclType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            type?: string;
            type_params?: ReturnType<typeof DeclType.prototype.toObject>[];
        }): DeclType {
            const message = new DeclType({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.type_params != null) {
                message.type_params = data.type_params.map(item => DeclType.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                type?: string;
                type_params?: ReturnType<typeof DeclType.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.type_params != null) {
                data.type_params = this.type_params.map((item: DeclType) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.type_params.length)
                writer.writeRepeatedMessage(4, this.type_params, (item: DeclType) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeclType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeclType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.type_params, () => pb_1.Message.addToRepeatedWrapperField(message, 4, DeclType.deserialize(reader), DeclType));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeclType {
            return DeclType.deserialize(bytes);
        }
    }
    export class IdentDecl extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: DeclType;
            value?: dependency_1.google.api.expr.v1beta1.Expr;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get type() {
            return pb_1.Message.getWrapperField(this, DeclType, 3) as DeclType;
        }
        set type(value: DeclType) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.api.expr.v1beta1.Expr, 4) as dependency_1.google.api.expr.v1beta1.Expr;
        }
        set value(value: dependency_1.google.api.expr.v1beta1.Expr) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            type?: ReturnType<typeof DeclType.prototype.toObject>;
            value?: ReturnType<typeof dependency_1.google.api.expr.v1beta1.Expr.prototype.toObject>;
        }): IdentDecl {
            const message = new IdentDecl({});
            if (data.type != null) {
                message.type = DeclType.fromObject(data.type);
            }
            if (data.value != null) {
                message.value = dependency_1.google.api.expr.v1beta1.Expr.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: ReturnType<typeof DeclType.prototype.toObject>;
                value?: ReturnType<typeof dependency_1.google.api.expr.v1beta1.Expr.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_type)
                writer.writeMessage(3, this.type, () => this.type.serialize(writer));
            if (this.has_value)
                writer.writeMessage(4, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentDecl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdentDecl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.type, () => message.type = DeclType.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.value, () => message.value = dependency_1.google.api.expr.v1beta1.Expr.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdentDecl {
            return IdentDecl.deserialize(bytes);
        }
    }
    export class FunctionDecl extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            args?: IdentDecl[];
            return_type?: DeclType;
            receiver_function?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
                if ("return_type" in data && data.return_type != undefined) {
                    this.return_type = data.return_type;
                }
                if ("receiver_function" in data && data.receiver_function != undefined) {
                    this.receiver_function = data.receiver_function;
                }
            }
        }
        get args() {
            return pb_1.Message.getRepeatedWrapperField(this, IdentDecl, 1) as IdentDecl[];
        }
        set args(value: IdentDecl[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get return_type() {
            return pb_1.Message.getWrapperField(this, DeclType, 2) as DeclType;
        }
        set return_type(value: DeclType) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_return_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get receiver_function() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set receiver_function(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            args?: ReturnType<typeof IdentDecl.prototype.toObject>[];
            return_type?: ReturnType<typeof DeclType.prototype.toObject>;
            receiver_function?: boolean;
        }): FunctionDecl {
            const message = new FunctionDecl({});
            if (data.args != null) {
                message.args = data.args.map(item => IdentDecl.fromObject(item));
            }
            if (data.return_type != null) {
                message.return_type = DeclType.fromObject(data.return_type);
            }
            if (data.receiver_function != null) {
                message.receiver_function = data.receiver_function;
            }
            return message;
        }
        toObject() {
            const data: {
                args?: ReturnType<typeof IdentDecl.prototype.toObject>[];
                return_type?: ReturnType<typeof DeclType.prototype.toObject>;
                receiver_function?: boolean;
            } = {};
            if (this.args != null) {
                data.args = this.args.map((item: IdentDecl) => item.toObject());
            }
            if (this.return_type != null) {
                data.return_type = this.return_type.toObject();
            }
            if (this.receiver_function != null) {
                data.receiver_function = this.receiver_function;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.args.length)
                writer.writeRepeatedMessage(1, this.args, (item: IdentDecl) => item.serialize(writer));
            if (this.has_return_type)
                writer.writeMessage(2, this.return_type, () => this.return_type.serialize(writer));
            if (this.receiver_function != false)
                writer.writeBool(3, this.receiver_function);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionDecl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionDecl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.args, () => pb_1.Message.addToRepeatedWrapperField(message, 1, IdentDecl.deserialize(reader), IdentDecl));
                        break;
                    case 2:
                        reader.readMessage(message.return_type, () => message.return_type = DeclType.deserialize(reader));
                        break;
                    case 3:
                        message.receiver_function = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FunctionDecl {
            return FunctionDecl.deserialize(bytes);
        }
    }
}
