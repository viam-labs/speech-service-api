/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/api/expr/v1beta1/source.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace google.api.expr.v1beta1 {
    export class SourceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            location?: string;
            line_offsets?: number[];
            positions?: Map<number, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("line_offsets" in data && data.line_offsets != undefined) {
                    this.line_offsets = data.line_offsets;
                }
                if ("positions" in data && data.positions != undefined) {
                    this.positions = data.positions;
                }
            }
            if (!this.positions)
                this.positions = new Map();
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get line_offsets() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set line_offsets(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get positions() {
            return pb_1.Message.getField(this, 4) as any as Map<number, number>;
        }
        set positions(value: Map<number, number>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            location?: string;
            line_offsets?: number[];
            positions?: {
                [key: number]: number;
            };
        }): SourceInfo {
            const message = new SourceInfo({});
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.line_offsets != null) {
                message.line_offsets = data.line_offsets;
            }
            if (typeof data.positions == "object") {
                message.positions = new Map(Object.entries(data.positions).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                location?: string;
                line_offsets?: number[];
                positions?: {
                    [key: number]: number;
                };
            } = {};
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.line_offsets != null) {
                data.line_offsets = this.line_offsets;
            }
            if (this.positions != null) {
                data.positions = (Object.fromEntries)(this.positions);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.location.length)
                writer.writeString(2, this.location);
            if (this.line_offsets.length)
                writer.writePackedInt32(3, this.line_offsets);
            for (const [key, value] of this.positions) {
                writer.writeMessage(4, this.positions, () => {
                    writer.writeInt32(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SourceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SourceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.location = reader.readString();
                        break;
                    case 3:
                        message.line_offsets = reader.readPackedInt32();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.positions as any, reader, reader.readInt32, reader.readInt32));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SourceInfo {
            return SourceInfo.deserialize(bytes);
        }
    }
    export class SourcePosition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            location?: string;
            offset?: number;
            line?: number;
            column?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("line" in data && data.line != undefined) {
                    this.line = data.line;
                }
                if ("column" in data && data.column != undefined) {
                    this.column = data.column;
                }
            }
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get line() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set line(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get column() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set column(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            location?: string;
            offset?: number;
            line?: number;
            column?: number;
        }): SourcePosition {
            const message = new SourcePosition({});
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.line != null) {
                message.line = data.line;
            }
            if (data.column != null) {
                message.column = data.column;
            }
            return message;
        }
        toObject() {
            const data: {
                location?: string;
                offset?: number;
                line?: number;
                column?: number;
            } = {};
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.line != null) {
                data.line = this.line;
            }
            if (this.column != null) {
                data.column = this.column;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.location.length)
                writer.writeString(1, this.location);
            if (this.offset != 0)
                writer.writeInt32(2, this.offset);
            if (this.line != 0)
                writer.writeInt32(3, this.line);
            if (this.column != 0)
                writer.writeInt32(4, this.column);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SourcePosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SourcePosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.location = reader.readString();
                        break;
                    case 2:
                        message.offset = reader.readInt32();
                        break;
                    case 3:
                        message.line = reader.readInt32();
                        break;
                    case 4:
                        message.column = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SourcePosition {
            return SourcePosition.deserialize(bytes);
        }
    }
}
