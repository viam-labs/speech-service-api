/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/rpc/error_details.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../protobuf/duration";
import * as pb_1 from "google-protobuf";
export namespace google.rpc {
    export class ErrorInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reason?: string;
            domain?: string;
            metadata?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("domain" in data && data.domain != undefined) {
                    this.domain = data.domain;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set reason(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get domain() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set domain(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            reason?: string;
            domain?: string;
            metadata?: {
                [key: string]: string;
            };
        }): ErrorInfo {
            const message = new ErrorInfo({});
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.domain != null) {
                message.domain = data.domain;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                reason?: string;
                domain?: string;
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.domain != null) {
                data.domain = this.domain;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reason.length)
                writer.writeString(1, this.reason);
            if (this.domain.length)
                writer.writeString(2, this.domain);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(3, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.reason = reader.readString();
                        break;
                    case 2:
                        message.domain = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorInfo {
            return ErrorInfo.deserialize(bytes);
        }
    }
    export class RetryInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            retry_delay?: dependency_1.google.protobuf.Duration;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("retry_delay" in data && data.retry_delay != undefined) {
                    this.retry_delay = data.retry_delay;
                }
            }
        }
        get retry_delay() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Duration, 1) as dependency_1.google.protobuf.Duration;
        }
        set retry_delay(value: dependency_1.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_retry_delay() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            retry_delay?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
        }): RetryInfo {
            const message = new RetryInfo({});
            if (data.retry_delay != null) {
                message.retry_delay = dependency_1.google.protobuf.Duration.fromObject(data.retry_delay);
            }
            return message;
        }
        toObject() {
            const data: {
                retry_delay?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
            } = {};
            if (this.retry_delay != null) {
                data.retry_delay = this.retry_delay.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_retry_delay)
                writer.writeMessage(1, this.retry_delay, () => this.retry_delay.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RetryInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RetryInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.retry_delay, () => message.retry_delay = dependency_1.google.protobuf.Duration.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RetryInfo {
            return RetryInfo.deserialize(bytes);
        }
    }
    export class DebugInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stack_entries?: string[];
            detail?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stack_entries" in data && data.stack_entries != undefined) {
                    this.stack_entries = data.stack_entries;
                }
                if ("detail" in data && data.detail != undefined) {
                    this.detail = data.detail;
                }
            }
        }
        get stack_entries() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set stack_entries(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get detail() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set detail(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            stack_entries?: string[];
            detail?: string;
        }): DebugInfo {
            const message = new DebugInfo({});
            if (data.stack_entries != null) {
                message.stack_entries = data.stack_entries;
            }
            if (data.detail != null) {
                message.detail = data.detail;
            }
            return message;
        }
        toObject() {
            const data: {
                stack_entries?: string[];
                detail?: string;
            } = {};
            if (this.stack_entries != null) {
                data.stack_entries = this.stack_entries;
            }
            if (this.detail != null) {
                data.detail = this.detail;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stack_entries.length)
                writer.writeRepeatedString(1, this.stack_entries);
            if (this.detail.length)
                writer.writeString(2, this.detail);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DebugInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DebugInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.detail = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DebugInfo {
            return DebugInfo.deserialize(bytes);
        }
    }
    export class QuotaFailure extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            violations?: QuotaFailure.Violation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("violations" in data && data.violations != undefined) {
                    this.violations = data.violations;
                }
            }
        }
        get violations() {
            return pb_1.Message.getRepeatedWrapperField(this, QuotaFailure.Violation, 1) as QuotaFailure.Violation[];
        }
        set violations(value: QuotaFailure.Violation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            violations?: ReturnType<typeof QuotaFailure.Violation.prototype.toObject>[];
        }): QuotaFailure {
            const message = new QuotaFailure({});
            if (data.violations != null) {
                message.violations = data.violations.map(item => QuotaFailure.Violation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                violations?: ReturnType<typeof QuotaFailure.Violation.prototype.toObject>[];
            } = {};
            if (this.violations != null) {
                data.violations = this.violations.map((item: QuotaFailure.Violation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.violations.length)
                writer.writeRepeatedMessage(1, this.violations, (item: QuotaFailure.Violation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuotaFailure {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuotaFailure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.violations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuotaFailure.Violation.deserialize(reader), QuotaFailure.Violation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuotaFailure {
            return QuotaFailure.deserialize(bytes);
        }
    }
    export namespace QuotaFailure {
        export class Violation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                subject?: string;
                description?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("subject" in data && data.subject != undefined) {
                        this.subject = data.subject;
                    }
                    if ("description" in data && data.description != undefined) {
                        this.description = data.description;
                    }
                }
            }
            get subject() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set subject(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get description() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set description(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                subject?: string;
                description?: string;
            }): Violation {
                const message = new Violation({});
                if (data.subject != null) {
                    message.subject = data.subject;
                }
                if (data.description != null) {
                    message.description = data.description;
                }
                return message;
            }
            toObject() {
                const data: {
                    subject?: string;
                    description?: string;
                } = {};
                if (this.subject != null) {
                    data.subject = this.subject;
                }
                if (this.description != null) {
                    data.description = this.description;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.subject.length)
                    writer.writeString(1, this.subject);
                if (this.description.length)
                    writer.writeString(2, this.description);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Violation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Violation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.subject = reader.readString();
                            break;
                        case 2:
                            message.description = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Violation {
                return Violation.deserialize(bytes);
            }
        }
    }
    export class PreconditionFailure extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            violations?: PreconditionFailure.Violation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("violations" in data && data.violations != undefined) {
                    this.violations = data.violations;
                }
            }
        }
        get violations() {
            return pb_1.Message.getRepeatedWrapperField(this, PreconditionFailure.Violation, 1) as PreconditionFailure.Violation[];
        }
        set violations(value: PreconditionFailure.Violation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            violations?: ReturnType<typeof PreconditionFailure.Violation.prototype.toObject>[];
        }): PreconditionFailure {
            const message = new PreconditionFailure({});
            if (data.violations != null) {
                message.violations = data.violations.map(item => PreconditionFailure.Violation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                violations?: ReturnType<typeof PreconditionFailure.Violation.prototype.toObject>[];
            } = {};
            if (this.violations != null) {
                data.violations = this.violations.map((item: PreconditionFailure.Violation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.violations.length)
                writer.writeRepeatedMessage(1, this.violations, (item: PreconditionFailure.Violation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreconditionFailure {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreconditionFailure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.violations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PreconditionFailure.Violation.deserialize(reader), PreconditionFailure.Violation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PreconditionFailure {
            return PreconditionFailure.deserialize(bytes);
        }
    }
    export namespace PreconditionFailure {
        export class Violation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                type?: string;
                subject?: string;
                description?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("subject" in data && data.subject != undefined) {
                        this.subject = data.subject;
                    }
                    if ("description" in data && data.description != undefined) {
                        this.description = data.description;
                    }
                }
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set type(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get subject() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set subject(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get description() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set description(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                type?: string;
                subject?: string;
                description?: string;
            }): Violation {
                const message = new Violation({});
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.subject != null) {
                    message.subject = data.subject;
                }
                if (data.description != null) {
                    message.description = data.description;
                }
                return message;
            }
            toObject() {
                const data: {
                    type?: string;
                    subject?: string;
                    description?: string;
                } = {};
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.subject != null) {
                    data.subject = this.subject;
                }
                if (this.description != null) {
                    data.description = this.description;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.type.length)
                    writer.writeString(1, this.type);
                if (this.subject.length)
                    writer.writeString(2, this.subject);
                if (this.description.length)
                    writer.writeString(3, this.description);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Violation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Violation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.type = reader.readString();
                            break;
                        case 2:
                            message.subject = reader.readString();
                            break;
                        case 3:
                            message.description = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Violation {
                return Violation.deserialize(bytes);
            }
        }
    }
    export class BadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            field_violations?: BadRequest.FieldViolation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field_violations" in data && data.field_violations != undefined) {
                    this.field_violations = data.field_violations;
                }
            }
        }
        get field_violations() {
            return pb_1.Message.getRepeatedWrapperField(this, BadRequest.FieldViolation, 1) as BadRequest.FieldViolation[];
        }
        set field_violations(value: BadRequest.FieldViolation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            field_violations?: ReturnType<typeof BadRequest.FieldViolation.prototype.toObject>[];
        }): BadRequest {
            const message = new BadRequest({});
            if (data.field_violations != null) {
                message.field_violations = data.field_violations.map(item => BadRequest.FieldViolation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                field_violations?: ReturnType<typeof BadRequest.FieldViolation.prototype.toObject>[];
            } = {};
            if (this.field_violations != null) {
                data.field_violations = this.field_violations.map((item: BadRequest.FieldViolation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field_violations.length)
                writer.writeRepeatedMessage(1, this.field_violations, (item: BadRequest.FieldViolation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.field_violations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BadRequest.FieldViolation.deserialize(reader), BadRequest.FieldViolation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BadRequest {
            return BadRequest.deserialize(bytes);
        }
    }
    export namespace BadRequest {
        export class FieldViolation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                field?: string;
                description?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("field" in data && data.field != undefined) {
                        this.field = data.field;
                    }
                    if ("description" in data && data.description != undefined) {
                        this.description = data.description;
                    }
                }
            }
            get field() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set field(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get description() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set description(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                field?: string;
                description?: string;
            }): FieldViolation {
                const message = new FieldViolation({});
                if (data.field != null) {
                    message.field = data.field;
                }
                if (data.description != null) {
                    message.description = data.description;
                }
                return message;
            }
            toObject() {
                const data: {
                    field?: string;
                    description?: string;
                } = {};
                if (this.field != null) {
                    data.field = this.field;
                }
                if (this.description != null) {
                    data.description = this.description;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.field.length)
                    writer.writeString(1, this.field);
                if (this.description.length)
                    writer.writeString(2, this.description);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldViolation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldViolation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.field = reader.readString();
                            break;
                        case 2:
                            message.description = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FieldViolation {
                return FieldViolation.deserialize(bytes);
            }
        }
    }
    export class RequestInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: string;
            serving_data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("serving_data" in data && data.serving_data != undefined) {
                    this.serving_data = data.serving_data;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get serving_data() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set serving_data(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            request_id?: string;
            serving_data?: string;
        }): RequestInfo {
            const message = new RequestInfo({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.serving_data != null) {
                message.serving_data = data.serving_data;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: string;
                serving_data?: string;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.serving_data != null) {
                data.serving_data = this.serving_data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id.length)
                writer.writeString(1, this.request_id);
            if (this.serving_data.length)
                writer.writeString(2, this.serving_data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readString();
                        break;
                    case 2:
                        message.serving_data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestInfo {
            return RequestInfo.deserialize(bytes);
        }
    }
    export class ResourceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resource_type?: string;
            resource_name?: string;
            owner?: string;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resource_type" in data && data.resource_type != undefined) {
                    this.resource_type = data.resource_type;
                }
                if ("resource_name" in data && data.resource_name != undefined) {
                    this.resource_name = data.resource_name;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get resource_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set resource_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            resource_type?: string;
            resource_name?: string;
            owner?: string;
            description?: string;
        }): ResourceInfo {
            const message = new ResourceInfo({});
            if (data.resource_type != null) {
                message.resource_type = data.resource_type;
            }
            if (data.resource_name != null) {
                message.resource_name = data.resource_name;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                resource_type?: string;
                resource_name?: string;
                owner?: string;
                description?: string;
            } = {};
            if (this.resource_type != null) {
                data.resource_type = this.resource_type;
            }
            if (this.resource_name != null) {
                data.resource_name = this.resource_name;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resource_type.length)
                writer.writeString(1, this.resource_type);
            if (this.resource_name.length)
                writer.writeString(2, this.resource_name);
            if (this.owner.length)
                writer.writeString(3, this.owner);
            if (this.description.length)
                writer.writeString(4, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.resource_type = reader.readString();
                        break;
                    case 2:
                        message.resource_name = reader.readString();
                        break;
                    case 3:
                        message.owner = reader.readString();
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceInfo {
            return ResourceInfo.deserialize(bytes);
        }
    }
    export class Help extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            links?: Help.Link[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("links" in data && data.links != undefined) {
                    this.links = data.links;
                }
            }
        }
        get links() {
            return pb_1.Message.getRepeatedWrapperField(this, Help.Link, 1) as Help.Link[];
        }
        set links(value: Help.Link[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            links?: ReturnType<typeof Help.Link.prototype.toObject>[];
        }): Help {
            const message = new Help({});
            if (data.links != null) {
                message.links = data.links.map(item => Help.Link.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                links?: ReturnType<typeof Help.Link.prototype.toObject>[];
            } = {};
            if (this.links != null) {
                data.links = this.links.map((item: Help.Link) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.links.length)
                writer.writeRepeatedMessage(1, this.links, (item: Help.Link) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Help {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Help();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.links, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Help.Link.deserialize(reader), Help.Link));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Help {
            return Help.deserialize(bytes);
        }
    }
    export namespace Help {
        export class Link extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                description?: string;
                url?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("description" in data && data.description != undefined) {
                        this.description = data.description;
                    }
                    if ("url" in data && data.url != undefined) {
                        this.url = data.url;
                    }
                }
            }
            get description() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set description(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get url() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set url(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                description?: string;
                url?: string;
            }): Link {
                const message = new Link({});
                if (data.description != null) {
                    message.description = data.description;
                }
                if (data.url != null) {
                    message.url = data.url;
                }
                return message;
            }
            toObject() {
                const data: {
                    description?: string;
                    url?: string;
                } = {};
                if (this.description != null) {
                    data.description = this.description;
                }
                if (this.url != null) {
                    data.url = this.url;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.description.length)
                    writer.writeString(1, this.description);
                if (this.url.length)
                    writer.writeString(2, this.url);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Link {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Link();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.description = reader.readString();
                            break;
                        case 2:
                            message.url = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Link {
                return Link.deserialize(bytes);
            }
        }
    }
    export class LocalizedMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            locale?: string;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("locale" in data && data.locale != undefined) {
                    this.locale = data.locale;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get locale() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set locale(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            locale?: string;
            message?: string;
        }): LocalizedMessage {
            const message = new LocalizedMessage({});
            if (data.locale != null) {
                message.locale = data.locale;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                locale?: string;
                message?: string;
            } = {};
            if (this.locale != null) {
                data.locale = this.locale;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.locale.length)
                writer.writeString(1, this.locale);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalizedMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalizedMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.locale = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LocalizedMessage {
            return LocalizedMessage.deserialize(bytes);
        }
    }
}
