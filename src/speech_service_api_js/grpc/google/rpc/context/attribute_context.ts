/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/rpc/context/attribute_context.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protobuf/any";
import * as dependency_2 from "./../../protobuf/duration";
import * as dependency_3 from "./../../protobuf/struct";
import * as dependency_4 from "./../../protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace google.rpc.context {
    export class AttributeContext extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            origin?: AttributeContext.Peer;
            source?: AttributeContext.Peer;
            destination?: AttributeContext.Peer;
            request?: AttributeContext.Request;
            response?: AttributeContext.Response;
            resource?: AttributeContext.Resource;
            api?: AttributeContext.Api;
            extensions?: dependency_1.google.protobuf.Any[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("destination" in data && data.destination != undefined) {
                    this.destination = data.destination;
                }
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("api" in data && data.api != undefined) {
                    this.api = data.api;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, AttributeContext.Peer, 7) as AttributeContext.Peer;
        }
        set origin(value: AttributeContext.Peer) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get source() {
            return pb_1.Message.getWrapperField(this, AttributeContext.Peer, 1) as AttributeContext.Peer;
        }
        set source(value: AttributeContext.Peer) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_source() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get destination() {
            return pb_1.Message.getWrapperField(this, AttributeContext.Peer, 2) as AttributeContext.Peer;
        }
        set destination(value: AttributeContext.Peer) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_destination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get request() {
            return pb_1.Message.getWrapperField(this, AttributeContext.Request, 3) as AttributeContext.Request;
        }
        set request(value: AttributeContext.Request) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get response() {
            return pb_1.Message.getWrapperField(this, AttributeContext.Response, 4) as AttributeContext.Response;
        }
        set response(value: AttributeContext.Response) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get resource() {
            return pb_1.Message.getWrapperField(this, AttributeContext.Resource, 5) as AttributeContext.Resource;
        }
        set resource(value: AttributeContext.Resource) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_resource() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get api() {
            return pb_1.Message.getWrapperField(this, AttributeContext.Api, 6) as AttributeContext.Api;
        }
        set api(value: AttributeContext.Api) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_api() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get extensions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.protobuf.Any, 8) as dependency_1.google.protobuf.Any[];
        }
        set extensions(value: dependency_1.google.protobuf.Any[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            origin?: ReturnType<typeof AttributeContext.Peer.prototype.toObject>;
            source?: ReturnType<typeof AttributeContext.Peer.prototype.toObject>;
            destination?: ReturnType<typeof AttributeContext.Peer.prototype.toObject>;
            request?: ReturnType<typeof AttributeContext.Request.prototype.toObject>;
            response?: ReturnType<typeof AttributeContext.Response.prototype.toObject>;
            resource?: ReturnType<typeof AttributeContext.Resource.prototype.toObject>;
            api?: ReturnType<typeof AttributeContext.Api.prototype.toObject>;
            extensions?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>[];
        }): AttributeContext {
            const message = new AttributeContext({});
            if (data.origin != null) {
                message.origin = AttributeContext.Peer.fromObject(data.origin);
            }
            if (data.source != null) {
                message.source = AttributeContext.Peer.fromObject(data.source);
            }
            if (data.destination != null) {
                message.destination = AttributeContext.Peer.fromObject(data.destination);
            }
            if (data.request != null) {
                message.request = AttributeContext.Request.fromObject(data.request);
            }
            if (data.response != null) {
                message.response = AttributeContext.Response.fromObject(data.response);
            }
            if (data.resource != null) {
                message.resource = AttributeContext.Resource.fromObject(data.resource);
            }
            if (data.api != null) {
                message.api = AttributeContext.Api.fromObject(data.api);
            }
            if (data.extensions != null) {
                message.extensions = data.extensions.map(item => dependency_1.google.protobuf.Any.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                origin?: ReturnType<typeof AttributeContext.Peer.prototype.toObject>;
                source?: ReturnType<typeof AttributeContext.Peer.prototype.toObject>;
                destination?: ReturnType<typeof AttributeContext.Peer.prototype.toObject>;
                request?: ReturnType<typeof AttributeContext.Request.prototype.toObject>;
                response?: ReturnType<typeof AttributeContext.Response.prototype.toObject>;
                resource?: ReturnType<typeof AttributeContext.Resource.prototype.toObject>;
                api?: ReturnType<typeof AttributeContext.Api.prototype.toObject>;
                extensions?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>[];
            } = {};
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            if (this.source != null) {
                data.source = this.source.toObject();
            }
            if (this.destination != null) {
                data.destination = this.destination.toObject();
            }
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            if (this.resource != null) {
                data.resource = this.resource.toObject();
            }
            if (this.api != null) {
                data.api = this.api.toObject();
            }
            if (this.extensions != null) {
                data.extensions = this.extensions.map((item: dependency_1.google.protobuf.Any) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_origin)
                writer.writeMessage(7, this.origin, () => this.origin.serialize(writer));
            if (this.has_source)
                writer.writeMessage(1, this.source, () => this.source.serialize(writer));
            if (this.has_destination)
                writer.writeMessage(2, this.destination, () => this.destination.serialize(writer));
            if (this.has_request)
                writer.writeMessage(3, this.request, () => this.request.serialize(writer));
            if (this.has_response)
                writer.writeMessage(4, this.response, () => this.response.serialize(writer));
            if (this.has_resource)
                writer.writeMessage(5, this.resource, () => this.resource.serialize(writer));
            if (this.has_api)
                writer.writeMessage(6, this.api, () => this.api.serialize(writer));
            if (this.extensions.length)
                writer.writeRepeatedMessage(8, this.extensions, (item: dependency_1.google.protobuf.Any) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttributeContext {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttributeContext();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 7:
                        reader.readMessage(message.origin, () => message.origin = AttributeContext.Peer.deserialize(reader));
                        break;
                    case 1:
                        reader.readMessage(message.source, () => message.source = AttributeContext.Peer.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.destination, () => message.destination = AttributeContext.Peer.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.request, () => message.request = AttributeContext.Request.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.response, () => message.response = AttributeContext.Response.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.resource, () => message.resource = AttributeContext.Resource.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.api, () => message.api = AttributeContext.Api.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_1.google.protobuf.Any.deserialize(reader), dependency_1.google.protobuf.Any));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AttributeContext {
            return AttributeContext.deserialize(bytes);
        }
    }
    export namespace AttributeContext {
        export class Peer extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                ip?: string;
                port?: number;
                labels?: Map<string, string>;
                principal?: string;
                region_code?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ip" in data && data.ip != undefined) {
                        this.ip = data.ip;
                    }
                    if ("port" in data && data.port != undefined) {
                        this.port = data.port;
                    }
                    if ("labels" in data && data.labels != undefined) {
                        this.labels = data.labels;
                    }
                    if ("principal" in data && data.principal != undefined) {
                        this.principal = data.principal;
                    }
                    if ("region_code" in data && data.region_code != undefined) {
                        this.region_code = data.region_code;
                    }
                }
                if (!this.labels)
                    this.labels = new Map();
            }
            get ip() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set ip(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get port() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set port(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get labels() {
                return pb_1.Message.getField(this, 6) as any as Map<string, string>;
            }
            set labels(value: Map<string, string>) {
                pb_1.Message.setField(this, 6, value as any);
            }
            get principal() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set principal(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get region_code() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set region_code(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            static fromObject(data: {
                ip?: string;
                port?: number;
                labels?: {
                    [key: string]: string;
                };
                principal?: string;
                region_code?: string;
            }): Peer {
                const message = new Peer({});
                if (data.ip != null) {
                    message.ip = data.ip;
                }
                if (data.port != null) {
                    message.port = data.port;
                }
                if (typeof data.labels == "object") {
                    message.labels = new Map(Object.entries(data.labels));
                }
                if (data.principal != null) {
                    message.principal = data.principal;
                }
                if (data.region_code != null) {
                    message.region_code = data.region_code;
                }
                return message;
            }
            toObject() {
                const data: {
                    ip?: string;
                    port?: number;
                    labels?: {
                        [key: string]: string;
                    };
                    principal?: string;
                    region_code?: string;
                } = {};
                if (this.ip != null) {
                    data.ip = this.ip;
                }
                if (this.port != null) {
                    data.port = this.port;
                }
                if (this.labels != null) {
                    data.labels = (Object.fromEntries)(this.labels);
                }
                if (this.principal != null) {
                    data.principal = this.principal;
                }
                if (this.region_code != null) {
                    data.region_code = this.region_code;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.ip.length)
                    writer.writeString(1, this.ip);
                if (this.port != 0)
                    writer.writeInt64(2, this.port);
                for (const [key, value] of this.labels) {
                    writer.writeMessage(6, this.labels, () => {
                        writer.writeString(1, key);
                        writer.writeString(2, value);
                    });
                }
                if (this.principal.length)
                    writer.writeString(7, this.principal);
                if (this.region_code.length)
                    writer.writeString(8, this.region_code);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Peer {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Peer();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.ip = reader.readString();
                            break;
                        case 2:
                            message.port = reader.readInt64();
                            break;
                        case 6:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                            break;
                        case 7:
                            message.principal = reader.readString();
                            break;
                        case 8:
                            message.region_code = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Peer {
                return Peer.deserialize(bytes);
            }
        }
        export class Api extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                service?: string;
                operation?: string;
                protocol?: string;
                version?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("service" in data && data.service != undefined) {
                        this.service = data.service;
                    }
                    if ("operation" in data && data.operation != undefined) {
                        this.operation = data.operation;
                    }
                    if ("protocol" in data && data.protocol != undefined) {
                        this.protocol = data.protocol;
                    }
                    if ("version" in data && data.version != undefined) {
                        this.version = data.version;
                    }
                }
            }
            get service() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set service(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get operation() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set operation(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get protocol() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set protocol(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get version() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set version(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                service?: string;
                operation?: string;
                protocol?: string;
                version?: string;
            }): Api {
                const message = new Api({});
                if (data.service != null) {
                    message.service = data.service;
                }
                if (data.operation != null) {
                    message.operation = data.operation;
                }
                if (data.protocol != null) {
                    message.protocol = data.protocol;
                }
                if (data.version != null) {
                    message.version = data.version;
                }
                return message;
            }
            toObject() {
                const data: {
                    service?: string;
                    operation?: string;
                    protocol?: string;
                    version?: string;
                } = {};
                if (this.service != null) {
                    data.service = this.service;
                }
                if (this.operation != null) {
                    data.operation = this.operation;
                }
                if (this.protocol != null) {
                    data.protocol = this.protocol;
                }
                if (this.version != null) {
                    data.version = this.version;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.service.length)
                    writer.writeString(1, this.service);
                if (this.operation.length)
                    writer.writeString(2, this.operation);
                if (this.protocol.length)
                    writer.writeString(3, this.protocol);
                if (this.version.length)
                    writer.writeString(4, this.version);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Api {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Api();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.service = reader.readString();
                            break;
                        case 2:
                            message.operation = reader.readString();
                            break;
                        case 3:
                            message.protocol = reader.readString();
                            break;
                        case 4:
                            message.version = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Api {
                return Api.deserialize(bytes);
            }
        }
        export class Auth extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                principal?: string;
                audiences?: string[];
                presenter?: string;
                claims?: dependency_3.google.protobuf.Struct;
                access_levels?: string[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 5], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("principal" in data && data.principal != undefined) {
                        this.principal = data.principal;
                    }
                    if ("audiences" in data && data.audiences != undefined) {
                        this.audiences = data.audiences;
                    }
                    if ("presenter" in data && data.presenter != undefined) {
                        this.presenter = data.presenter;
                    }
                    if ("claims" in data && data.claims != undefined) {
                        this.claims = data.claims;
                    }
                    if ("access_levels" in data && data.access_levels != undefined) {
                        this.access_levels = data.access_levels;
                    }
                }
            }
            get principal() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set principal(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get audiences() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
            }
            set audiences(value: string[]) {
                pb_1.Message.setField(this, 2, value);
            }
            get presenter() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set presenter(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get claims() {
                return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Struct, 4) as dependency_3.google.protobuf.Struct;
            }
            set claims(value: dependency_3.google.protobuf.Struct) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_claims() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get access_levels() {
                return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
            }
            set access_levels(value: string[]) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                principal?: string;
                audiences?: string[];
                presenter?: string;
                claims?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                access_levels?: string[];
            }): Auth {
                const message = new Auth({});
                if (data.principal != null) {
                    message.principal = data.principal;
                }
                if (data.audiences != null) {
                    message.audiences = data.audiences;
                }
                if (data.presenter != null) {
                    message.presenter = data.presenter;
                }
                if (data.claims != null) {
                    message.claims = dependency_3.google.protobuf.Struct.fromObject(data.claims);
                }
                if (data.access_levels != null) {
                    message.access_levels = data.access_levels;
                }
                return message;
            }
            toObject() {
                const data: {
                    principal?: string;
                    audiences?: string[];
                    presenter?: string;
                    claims?: ReturnType<typeof dependency_3.google.protobuf.Struct.prototype.toObject>;
                    access_levels?: string[];
                } = {};
                if (this.principal != null) {
                    data.principal = this.principal;
                }
                if (this.audiences != null) {
                    data.audiences = this.audiences;
                }
                if (this.presenter != null) {
                    data.presenter = this.presenter;
                }
                if (this.claims != null) {
                    data.claims = this.claims.toObject();
                }
                if (this.access_levels != null) {
                    data.access_levels = this.access_levels;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.principal.length)
                    writer.writeString(1, this.principal);
                if (this.audiences.length)
                    writer.writeRepeatedString(2, this.audiences);
                if (this.presenter.length)
                    writer.writeString(3, this.presenter);
                if (this.has_claims)
                    writer.writeMessage(4, this.claims, () => this.claims.serialize(writer));
                if (this.access_levels.length)
                    writer.writeRepeatedString(5, this.access_levels);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Auth {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Auth();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.principal = reader.readString();
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                            break;
                        case 3:
                            message.presenter = reader.readString();
                            break;
                        case 4:
                            reader.readMessage(message.claims, () => message.claims = dependency_3.google.protobuf.Struct.deserialize(reader));
                            break;
                        case 5:
                            pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Auth {
                return Auth.deserialize(bytes);
            }
        }
        export class Request extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                method?: string;
                headers?: Map<string, string>;
                path?: string;
                host?: string;
                scheme?: string;
                query?: string;
                time?: dependency_4.google.protobuf.Timestamp;
                size?: number;
                protocol?: string;
                reason?: string;
                auth?: AttributeContext.Auth;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("method" in data && data.method != undefined) {
                        this.method = data.method;
                    }
                    if ("headers" in data && data.headers != undefined) {
                        this.headers = data.headers;
                    }
                    if ("path" in data && data.path != undefined) {
                        this.path = data.path;
                    }
                    if ("host" in data && data.host != undefined) {
                        this.host = data.host;
                    }
                    if ("scheme" in data && data.scheme != undefined) {
                        this.scheme = data.scheme;
                    }
                    if ("query" in data && data.query != undefined) {
                        this.query = data.query;
                    }
                    if ("time" in data && data.time != undefined) {
                        this.time = data.time;
                    }
                    if ("size" in data && data.size != undefined) {
                        this.size = data.size;
                    }
                    if ("protocol" in data && data.protocol != undefined) {
                        this.protocol = data.protocol;
                    }
                    if ("reason" in data && data.reason != undefined) {
                        this.reason = data.reason;
                    }
                    if ("auth" in data && data.auth != undefined) {
                        this.auth = data.auth;
                    }
                }
                if (!this.headers)
                    this.headers = new Map();
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get method() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set method(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get headers() {
                return pb_1.Message.getField(this, 3) as any as Map<string, string>;
            }
            set headers(value: Map<string, string>) {
                pb_1.Message.setField(this, 3, value as any);
            }
            get path() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set path(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get host() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set host(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get scheme() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set scheme(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get query() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set query(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get time() {
                return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 9) as dependency_4.google.protobuf.Timestamp;
            }
            set time(value: dependency_4.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 9, value);
            }
            get has_time() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get size() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set size(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get protocol() {
                return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
            }
            set protocol(value: string) {
                pb_1.Message.setField(this, 11, value);
            }
            get reason() {
                return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
            }
            set reason(value: string) {
                pb_1.Message.setField(this, 12, value);
            }
            get auth() {
                return pb_1.Message.getWrapperField(this, AttributeContext.Auth, 13) as AttributeContext.Auth;
            }
            set auth(value: AttributeContext.Auth) {
                pb_1.Message.setWrapperField(this, 13, value);
            }
            get has_auth() {
                return pb_1.Message.getField(this, 13) != null;
            }
            static fromObject(data: {
                id?: string;
                method?: string;
                headers?: {
                    [key: string]: string;
                };
                path?: string;
                host?: string;
                scheme?: string;
                query?: string;
                time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                size?: number;
                protocol?: string;
                reason?: string;
                auth?: ReturnType<typeof AttributeContext.Auth.prototype.toObject>;
            }): Request {
                const message = new Request({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.method != null) {
                    message.method = data.method;
                }
                if (typeof data.headers == "object") {
                    message.headers = new Map(Object.entries(data.headers));
                }
                if (data.path != null) {
                    message.path = data.path;
                }
                if (data.host != null) {
                    message.host = data.host;
                }
                if (data.scheme != null) {
                    message.scheme = data.scheme;
                }
                if (data.query != null) {
                    message.query = data.query;
                }
                if (data.time != null) {
                    message.time = dependency_4.google.protobuf.Timestamp.fromObject(data.time);
                }
                if (data.size != null) {
                    message.size = data.size;
                }
                if (data.protocol != null) {
                    message.protocol = data.protocol;
                }
                if (data.reason != null) {
                    message.reason = data.reason;
                }
                if (data.auth != null) {
                    message.auth = AttributeContext.Auth.fromObject(data.auth);
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    method?: string;
                    headers?: {
                        [key: string]: string;
                    };
                    path?: string;
                    host?: string;
                    scheme?: string;
                    query?: string;
                    time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                    size?: number;
                    protocol?: string;
                    reason?: string;
                    auth?: ReturnType<typeof AttributeContext.Auth.prototype.toObject>;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.method != null) {
                    data.method = this.method;
                }
                if (this.headers != null) {
                    data.headers = (Object.fromEntries)(this.headers);
                }
                if (this.path != null) {
                    data.path = this.path;
                }
                if (this.host != null) {
                    data.host = this.host;
                }
                if (this.scheme != null) {
                    data.scheme = this.scheme;
                }
                if (this.query != null) {
                    data.query = this.query;
                }
                if (this.time != null) {
                    data.time = this.time.toObject();
                }
                if (this.size != null) {
                    data.size = this.size;
                }
                if (this.protocol != null) {
                    data.protocol = this.protocol;
                }
                if (this.reason != null) {
                    data.reason = this.reason;
                }
                if (this.auth != null) {
                    data.auth = this.auth.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (this.method.length)
                    writer.writeString(2, this.method);
                for (const [key, value] of this.headers) {
                    writer.writeMessage(3, this.headers, () => {
                        writer.writeString(1, key);
                        writer.writeString(2, value);
                    });
                }
                if (this.path.length)
                    writer.writeString(4, this.path);
                if (this.host.length)
                    writer.writeString(5, this.host);
                if (this.scheme.length)
                    writer.writeString(6, this.scheme);
                if (this.query.length)
                    writer.writeString(7, this.query);
                if (this.has_time)
                    writer.writeMessage(9, this.time, () => this.time.serialize(writer));
                if (this.size != 0)
                    writer.writeInt64(10, this.size);
                if (this.protocol.length)
                    writer.writeString(11, this.protocol);
                if (this.reason.length)
                    writer.writeString(12, this.reason);
                if (this.has_auth)
                    writer.writeMessage(13, this.auth, () => this.auth.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.method = reader.readString();
                            break;
                        case 3:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                            break;
                        case 4:
                            message.path = reader.readString();
                            break;
                        case 5:
                            message.host = reader.readString();
                            break;
                        case 6:
                            message.scheme = reader.readString();
                            break;
                        case 7:
                            message.query = reader.readString();
                            break;
                        case 9:
                            reader.readMessage(message.time, () => message.time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 10:
                            message.size = reader.readInt64();
                            break;
                        case 11:
                            message.protocol = reader.readString();
                            break;
                        case 12:
                            message.reason = reader.readString();
                            break;
                        case 13:
                            reader.readMessage(message.auth, () => message.auth = AttributeContext.Auth.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Request {
                return Request.deserialize(bytes);
            }
        }
        export class Response extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                code?: number;
                size?: number;
                headers?: Map<string, string>;
                time?: dependency_4.google.protobuf.Timestamp;
                backend_latency?: dependency_2.google.protobuf.Duration;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("size" in data && data.size != undefined) {
                        this.size = data.size;
                    }
                    if ("headers" in data && data.headers != undefined) {
                        this.headers = data.headers;
                    }
                    if ("time" in data && data.time != undefined) {
                        this.time = data.time;
                    }
                    if ("backend_latency" in data && data.backend_latency != undefined) {
                        this.backend_latency = data.backend_latency;
                    }
                }
                if (!this.headers)
                    this.headers = new Map();
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set code(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get size() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set size(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get headers() {
                return pb_1.Message.getField(this, 3) as any as Map<string, string>;
            }
            set headers(value: Map<string, string>) {
                pb_1.Message.setField(this, 3, value as any);
            }
            get time() {
                return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 4) as dependency_4.google.protobuf.Timestamp;
            }
            set time(value: dependency_4.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_time() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get backend_latency() {
                return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Duration, 5) as dependency_2.google.protobuf.Duration;
            }
            set backend_latency(value: dependency_2.google.protobuf.Duration) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_backend_latency() {
                return pb_1.Message.getField(this, 5) != null;
            }
            static fromObject(data: {
                code?: number;
                size?: number;
                headers?: {
                    [key: string]: string;
                };
                time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                backend_latency?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
            }): Response {
                const message = new Response({});
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.size != null) {
                    message.size = data.size;
                }
                if (typeof data.headers == "object") {
                    message.headers = new Map(Object.entries(data.headers));
                }
                if (data.time != null) {
                    message.time = dependency_4.google.protobuf.Timestamp.fromObject(data.time);
                }
                if (data.backend_latency != null) {
                    message.backend_latency = dependency_2.google.protobuf.Duration.fromObject(data.backend_latency);
                }
                return message;
            }
            toObject() {
                const data: {
                    code?: number;
                    size?: number;
                    headers?: {
                        [key: string]: string;
                    };
                    time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                    backend_latency?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
                } = {};
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.size != null) {
                    data.size = this.size;
                }
                if (this.headers != null) {
                    data.headers = (Object.fromEntries)(this.headers);
                }
                if (this.time != null) {
                    data.time = this.time.toObject();
                }
                if (this.backend_latency != null) {
                    data.backend_latency = this.backend_latency.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.code != 0)
                    writer.writeInt64(1, this.code);
                if (this.size != 0)
                    writer.writeInt64(2, this.size);
                for (const [key, value] of this.headers) {
                    writer.writeMessage(3, this.headers, () => {
                        writer.writeString(1, key);
                        writer.writeString(2, value);
                    });
                }
                if (this.has_time)
                    writer.writeMessage(4, this.time, () => this.time.serialize(writer));
                if (this.has_backend_latency)
                    writer.writeMessage(5, this.backend_latency, () => this.backend_latency.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.code = reader.readInt64();
                            break;
                        case 2:
                            message.size = reader.readInt64();
                            break;
                        case 3:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                            break;
                        case 4:
                            reader.readMessage(message.time, () => message.time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.backend_latency, () => message.backend_latency = dependency_2.google.protobuf.Duration.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Response {
                return Response.deserialize(bytes);
            }
        }
        export class Resource extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                service?: string;
                name?: string;
                type?: string;
                labels?: Map<string, string>;
                uid?: string;
                annotations?: Map<string, string>;
                display_name?: string;
                create_time?: dependency_4.google.protobuf.Timestamp;
                update_time?: dependency_4.google.protobuf.Timestamp;
                delete_time?: dependency_4.google.protobuf.Timestamp;
                etag?: string;
                location?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("service" in data && data.service != undefined) {
                        this.service = data.service;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("labels" in data && data.labels != undefined) {
                        this.labels = data.labels;
                    }
                    if ("uid" in data && data.uid != undefined) {
                        this.uid = data.uid;
                    }
                    if ("annotations" in data && data.annotations != undefined) {
                        this.annotations = data.annotations;
                    }
                    if ("display_name" in data && data.display_name != undefined) {
                        this.display_name = data.display_name;
                    }
                    if ("create_time" in data && data.create_time != undefined) {
                        this.create_time = data.create_time;
                    }
                    if ("update_time" in data && data.update_time != undefined) {
                        this.update_time = data.update_time;
                    }
                    if ("delete_time" in data && data.delete_time != undefined) {
                        this.delete_time = data.delete_time;
                    }
                    if ("etag" in data && data.etag != undefined) {
                        this.etag = data.etag;
                    }
                    if ("location" in data && data.location != undefined) {
                        this.location = data.location;
                    }
                }
                if (!this.labels)
                    this.labels = new Map();
                if (!this.annotations)
                    this.annotations = new Map();
            }
            get service() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set service(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set type(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get labels() {
                return pb_1.Message.getField(this, 4) as any as Map<string, string>;
            }
            set labels(value: Map<string, string>) {
                pb_1.Message.setField(this, 4, value as any);
            }
            get uid() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set uid(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get annotations() {
                return pb_1.Message.getField(this, 6) as any as Map<string, string>;
            }
            set annotations(value: Map<string, string>) {
                pb_1.Message.setField(this, 6, value as any);
            }
            get display_name() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set display_name(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get create_time() {
                return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 8) as dependency_4.google.protobuf.Timestamp;
            }
            set create_time(value: dependency_4.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 8, value);
            }
            get has_create_time() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get update_time() {
                return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 9) as dependency_4.google.protobuf.Timestamp;
            }
            set update_time(value: dependency_4.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 9, value);
            }
            get has_update_time() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get delete_time() {
                return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 10) as dependency_4.google.protobuf.Timestamp;
            }
            set delete_time(value: dependency_4.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 10, value);
            }
            get has_delete_time() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get etag() {
                return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
            }
            set etag(value: string) {
                pb_1.Message.setField(this, 11, value);
            }
            get location() {
                return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
            }
            set location(value: string) {
                pb_1.Message.setField(this, 12, value);
            }
            static fromObject(data: {
                service?: string;
                name?: string;
                type?: string;
                labels?: {
                    [key: string]: string;
                };
                uid?: string;
                annotations?: {
                    [key: string]: string;
                };
                display_name?: string;
                create_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                update_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                delete_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                etag?: string;
                location?: string;
            }): Resource {
                const message = new Resource({});
                if (data.service != null) {
                    message.service = data.service;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.type != null) {
                    message.type = data.type;
                }
                if (typeof data.labels == "object") {
                    message.labels = new Map(Object.entries(data.labels));
                }
                if (data.uid != null) {
                    message.uid = data.uid;
                }
                if (typeof data.annotations == "object") {
                    message.annotations = new Map(Object.entries(data.annotations));
                }
                if (data.display_name != null) {
                    message.display_name = data.display_name;
                }
                if (data.create_time != null) {
                    message.create_time = dependency_4.google.protobuf.Timestamp.fromObject(data.create_time);
                }
                if (data.update_time != null) {
                    message.update_time = dependency_4.google.protobuf.Timestamp.fromObject(data.update_time);
                }
                if (data.delete_time != null) {
                    message.delete_time = dependency_4.google.protobuf.Timestamp.fromObject(data.delete_time);
                }
                if (data.etag != null) {
                    message.etag = data.etag;
                }
                if (data.location != null) {
                    message.location = data.location;
                }
                return message;
            }
            toObject() {
                const data: {
                    service?: string;
                    name?: string;
                    type?: string;
                    labels?: {
                        [key: string]: string;
                    };
                    uid?: string;
                    annotations?: {
                        [key: string]: string;
                    };
                    display_name?: string;
                    create_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                    update_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                    delete_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                    etag?: string;
                    location?: string;
                } = {};
                if (this.service != null) {
                    data.service = this.service;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.labels != null) {
                    data.labels = (Object.fromEntries)(this.labels);
                }
                if (this.uid != null) {
                    data.uid = this.uid;
                }
                if (this.annotations != null) {
                    data.annotations = (Object.fromEntries)(this.annotations);
                }
                if (this.display_name != null) {
                    data.display_name = this.display_name;
                }
                if (this.create_time != null) {
                    data.create_time = this.create_time.toObject();
                }
                if (this.update_time != null) {
                    data.update_time = this.update_time.toObject();
                }
                if (this.delete_time != null) {
                    data.delete_time = this.delete_time.toObject();
                }
                if (this.etag != null) {
                    data.etag = this.etag;
                }
                if (this.location != null) {
                    data.location = this.location;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.service.length)
                    writer.writeString(1, this.service);
                if (this.name.length)
                    writer.writeString(2, this.name);
                if (this.type.length)
                    writer.writeString(3, this.type);
                for (const [key, value] of this.labels) {
                    writer.writeMessage(4, this.labels, () => {
                        writer.writeString(1, key);
                        writer.writeString(2, value);
                    });
                }
                if (this.uid.length)
                    writer.writeString(5, this.uid);
                for (const [key, value] of this.annotations) {
                    writer.writeMessage(6, this.annotations, () => {
                        writer.writeString(1, key);
                        writer.writeString(2, value);
                    });
                }
                if (this.display_name.length)
                    writer.writeString(7, this.display_name);
                if (this.has_create_time)
                    writer.writeMessage(8, this.create_time, () => this.create_time.serialize(writer));
                if (this.has_update_time)
                    writer.writeMessage(9, this.update_time, () => this.update_time.serialize(writer));
                if (this.has_delete_time)
                    writer.writeMessage(10, this.delete_time, () => this.delete_time.serialize(writer));
                if (this.etag.length)
                    writer.writeString(11, this.etag);
                if (this.location.length)
                    writer.writeString(12, this.location);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Resource {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Resource();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.service = reader.readString();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.type = reader.readString();
                            break;
                        case 4:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                            break;
                        case 5:
                            message.uid = reader.readString();
                            break;
                        case 6:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                            break;
                        case 7:
                            message.display_name = reader.readString();
                            break;
                        case 8:
                            reader.readMessage(message.create_time, () => message.create_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 9:
                            reader.readMessage(message.update_time, () => message.update_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 10:
                            reader.readMessage(message.delete_time, () => message.delete_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 11:
                            message.etag = reader.readString();
                            break;
                        case 12:
                            message.location = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Resource {
                return Resource.deserialize(bytes);
            }
        }
    }
}
