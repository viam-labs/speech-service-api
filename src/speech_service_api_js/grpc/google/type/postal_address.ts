/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/type/postal_address.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace google.type {
    export class PostalAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            revision?: number;
            region_code?: string;
            language_code?: string;
            postal_code?: string;
            sorting_code?: string;
            administrative_area?: string;
            locality?: string;
            sublocality?: string;
            address_lines?: string[];
            recipients?: string[];
            organization?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("revision" in data && data.revision != undefined) {
                    this.revision = data.revision;
                }
                if ("region_code" in data && data.region_code != undefined) {
                    this.region_code = data.region_code;
                }
                if ("language_code" in data && data.language_code != undefined) {
                    this.language_code = data.language_code;
                }
                if ("postal_code" in data && data.postal_code != undefined) {
                    this.postal_code = data.postal_code;
                }
                if ("sorting_code" in data && data.sorting_code != undefined) {
                    this.sorting_code = data.sorting_code;
                }
                if ("administrative_area" in data && data.administrative_area != undefined) {
                    this.administrative_area = data.administrative_area;
                }
                if ("locality" in data && data.locality != undefined) {
                    this.locality = data.locality;
                }
                if ("sublocality" in data && data.sublocality != undefined) {
                    this.sublocality = data.sublocality;
                }
                if ("address_lines" in data && data.address_lines != undefined) {
                    this.address_lines = data.address_lines;
                }
                if ("recipients" in data && data.recipients != undefined) {
                    this.recipients = data.recipients;
                }
                if ("organization" in data && data.organization != undefined) {
                    this.organization = data.organization;
                }
            }
        }
        get revision() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set revision(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get region_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set region_code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get language_code() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set language_code(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get postal_code() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set postal_code(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get sorting_code() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set sorting_code(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get administrative_area() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set administrative_area(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get locality() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set locality(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get sublocality() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set sublocality(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get address_lines() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set address_lines(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get recipients() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set recipients(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get organization() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set organization(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            revision?: number;
            region_code?: string;
            language_code?: string;
            postal_code?: string;
            sorting_code?: string;
            administrative_area?: string;
            locality?: string;
            sublocality?: string;
            address_lines?: string[];
            recipients?: string[];
            organization?: string;
        }): PostalAddress {
            const message = new PostalAddress({});
            if (data.revision != null) {
                message.revision = data.revision;
            }
            if (data.region_code != null) {
                message.region_code = data.region_code;
            }
            if (data.language_code != null) {
                message.language_code = data.language_code;
            }
            if (data.postal_code != null) {
                message.postal_code = data.postal_code;
            }
            if (data.sorting_code != null) {
                message.sorting_code = data.sorting_code;
            }
            if (data.administrative_area != null) {
                message.administrative_area = data.administrative_area;
            }
            if (data.locality != null) {
                message.locality = data.locality;
            }
            if (data.sublocality != null) {
                message.sublocality = data.sublocality;
            }
            if (data.address_lines != null) {
                message.address_lines = data.address_lines;
            }
            if (data.recipients != null) {
                message.recipients = data.recipients;
            }
            if (data.organization != null) {
                message.organization = data.organization;
            }
            return message;
        }
        toObject() {
            const data: {
                revision?: number;
                region_code?: string;
                language_code?: string;
                postal_code?: string;
                sorting_code?: string;
                administrative_area?: string;
                locality?: string;
                sublocality?: string;
                address_lines?: string[];
                recipients?: string[];
                organization?: string;
            } = {};
            if (this.revision != null) {
                data.revision = this.revision;
            }
            if (this.region_code != null) {
                data.region_code = this.region_code;
            }
            if (this.language_code != null) {
                data.language_code = this.language_code;
            }
            if (this.postal_code != null) {
                data.postal_code = this.postal_code;
            }
            if (this.sorting_code != null) {
                data.sorting_code = this.sorting_code;
            }
            if (this.administrative_area != null) {
                data.administrative_area = this.administrative_area;
            }
            if (this.locality != null) {
                data.locality = this.locality;
            }
            if (this.sublocality != null) {
                data.sublocality = this.sublocality;
            }
            if (this.address_lines != null) {
                data.address_lines = this.address_lines;
            }
            if (this.recipients != null) {
                data.recipients = this.recipients;
            }
            if (this.organization != null) {
                data.organization = this.organization;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.revision != 0)
                writer.writeInt32(1, this.revision);
            if (this.region_code.length)
                writer.writeString(2, this.region_code);
            if (this.language_code.length)
                writer.writeString(3, this.language_code);
            if (this.postal_code.length)
                writer.writeString(4, this.postal_code);
            if (this.sorting_code.length)
                writer.writeString(5, this.sorting_code);
            if (this.administrative_area.length)
                writer.writeString(6, this.administrative_area);
            if (this.locality.length)
                writer.writeString(7, this.locality);
            if (this.sublocality.length)
                writer.writeString(8, this.sublocality);
            if (this.address_lines.length)
                writer.writeRepeatedString(9, this.address_lines);
            if (this.recipients.length)
                writer.writeRepeatedString(10, this.recipients);
            if (this.organization.length)
                writer.writeString(11, this.organization);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PostalAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PostalAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.revision = reader.readInt32();
                        break;
                    case 2:
                        message.region_code = reader.readString();
                        break;
                    case 3:
                        message.language_code = reader.readString();
                        break;
                    case 4:
                        message.postal_code = reader.readString();
                        break;
                    case 5:
                        message.sorting_code = reader.readString();
                        break;
                    case 6:
                        message.administrative_area = reader.readString();
                        break;
                    case 7:
                        message.locality = reader.readString();
                        break;
                    case 8:
                        message.sublocality = reader.readString();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    case 11:
                        message.organization = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PostalAddress {
            return PostalAddress.deserialize(bytes);
        }
    }
}
