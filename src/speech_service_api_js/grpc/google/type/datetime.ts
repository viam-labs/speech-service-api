/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/type/datetime.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../protobuf/duration";
import * as pb_1 from "google-protobuf";
export namespace google.type {
    export class DateTime extends pb_1.Message {
        #one_of_decls: number[][] = [[8, 9]];
        constructor(data?: any[] | ({
            year?: number;
            month?: number;
            day?: number;
            hours?: number;
            minutes?: number;
            seconds?: number;
            nanos?: number;
        } & (({
            utc_offset?: dependency_1.google.protobuf.Duration;
            time_zone?: never;
        } | {
            utc_offset?: never;
            time_zone?: TimeZone;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("year" in data && data.year != undefined) {
                    this.year = data.year;
                }
                if ("month" in data && data.month != undefined) {
                    this.month = data.month;
                }
                if ("day" in data && data.day != undefined) {
                    this.day = data.day;
                }
                if ("hours" in data && data.hours != undefined) {
                    this.hours = data.hours;
                }
                if ("minutes" in data && data.minutes != undefined) {
                    this.minutes = data.minutes;
                }
                if ("seconds" in data && data.seconds != undefined) {
                    this.seconds = data.seconds;
                }
                if ("nanos" in data && data.nanos != undefined) {
                    this.nanos = data.nanos;
                }
                if ("utc_offset" in data && data.utc_offset != undefined) {
                    this.utc_offset = data.utc_offset;
                }
                if ("time_zone" in data && data.time_zone != undefined) {
                    this.time_zone = data.time_zone;
                }
            }
        }
        get year() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set year(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get month() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set month(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get day() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set day(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get hours() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set hours(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get minutes() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set minutes(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get seconds() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set seconds(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get nanos() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set nanos(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get utc_offset() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Duration, 8) as dependency_1.google.protobuf.Duration;
        }
        set utc_offset(value: dependency_1.google.protobuf.Duration) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_utc_offset() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get time_zone() {
            return pb_1.Message.getWrapperField(this, TimeZone, 9) as TimeZone;
        }
        set time_zone(value: TimeZone) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_time_zone() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get time_offset() {
            const cases: {
                [index: number]: "none" | "utc_offset" | "time_zone";
            } = {
                0: "none",
                8: "utc_offset",
                9: "time_zone"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8, 9])];
        }
        static fromObject(data: {
            year?: number;
            month?: number;
            day?: number;
            hours?: number;
            minutes?: number;
            seconds?: number;
            nanos?: number;
            utc_offset?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
            time_zone?: ReturnType<typeof TimeZone.prototype.toObject>;
        }): DateTime {
            const message = new DateTime({});
            if (data.year != null) {
                message.year = data.year;
            }
            if (data.month != null) {
                message.month = data.month;
            }
            if (data.day != null) {
                message.day = data.day;
            }
            if (data.hours != null) {
                message.hours = data.hours;
            }
            if (data.minutes != null) {
                message.minutes = data.minutes;
            }
            if (data.seconds != null) {
                message.seconds = data.seconds;
            }
            if (data.nanos != null) {
                message.nanos = data.nanos;
            }
            if (data.utc_offset != null) {
                message.utc_offset = dependency_1.google.protobuf.Duration.fromObject(data.utc_offset);
            }
            if (data.time_zone != null) {
                message.time_zone = TimeZone.fromObject(data.time_zone);
            }
            return message;
        }
        toObject() {
            const data: {
                year?: number;
                month?: number;
                day?: number;
                hours?: number;
                minutes?: number;
                seconds?: number;
                nanos?: number;
                utc_offset?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
                time_zone?: ReturnType<typeof TimeZone.prototype.toObject>;
            } = {};
            if (this.year != null) {
                data.year = this.year;
            }
            if (this.month != null) {
                data.month = this.month;
            }
            if (this.day != null) {
                data.day = this.day;
            }
            if (this.hours != null) {
                data.hours = this.hours;
            }
            if (this.minutes != null) {
                data.minutes = this.minutes;
            }
            if (this.seconds != null) {
                data.seconds = this.seconds;
            }
            if (this.nanos != null) {
                data.nanos = this.nanos;
            }
            if (this.utc_offset != null) {
                data.utc_offset = this.utc_offset.toObject();
            }
            if (this.time_zone != null) {
                data.time_zone = this.time_zone.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.year != 0)
                writer.writeInt32(1, this.year);
            if (this.month != 0)
                writer.writeInt32(2, this.month);
            if (this.day != 0)
                writer.writeInt32(3, this.day);
            if (this.hours != 0)
                writer.writeInt32(4, this.hours);
            if (this.minutes != 0)
                writer.writeInt32(5, this.minutes);
            if (this.seconds != 0)
                writer.writeInt32(6, this.seconds);
            if (this.nanos != 0)
                writer.writeInt32(7, this.nanos);
            if (this.has_utc_offset)
                writer.writeMessage(8, this.utc_offset, () => this.utc_offset.serialize(writer));
            if (this.has_time_zone)
                writer.writeMessage(9, this.time_zone, () => this.time_zone.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DateTime {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DateTime();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.year = reader.readInt32();
                        break;
                    case 2:
                        message.month = reader.readInt32();
                        break;
                    case 3:
                        message.day = reader.readInt32();
                        break;
                    case 4:
                        message.hours = reader.readInt32();
                        break;
                    case 5:
                        message.minutes = reader.readInt32();
                        break;
                    case 6:
                        message.seconds = reader.readInt32();
                        break;
                    case 7:
                        message.nanos = reader.readInt32();
                        break;
                    case 8:
                        reader.readMessage(message.utc_offset, () => message.utc_offset = dependency_1.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.time_zone, () => message.time_zone = TimeZone.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DateTime {
            return DateTime.deserialize(bytes);
        }
    }
    export class TimeZone extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            version?: string;
        }): TimeZone {
            const message = new TimeZone({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                version?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimeZone {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimeZone();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimeZone {
            return TimeZone.deserialize(bytes);
        }
    }
}
