/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/type/quaternion.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace google.type {
    export class Quaternion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            z?: number;
            w?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
                if ("w" in data && data.w != undefined) {
                    this.w = data.w;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get z() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get w() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set w(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            z?: number;
            w?: number;
        }): Quaternion {
            const message = new Quaternion({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.z != null) {
                message.z = data.z;
            }
            if (data.w != null) {
                message.w = data.w;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                z?: number;
                w?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            if (this.w != null) {
                data.w = this.w;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeDouble(1, this.x);
            if (this.y != 0)
                writer.writeDouble(2, this.y);
            if (this.z != 0)
                writer.writeDouble(3, this.z);
            if (this.w != 0)
                writer.writeDouble(4, this.w);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Quaternion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Quaternion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readDouble();
                        break;
                    case 2:
                        message.y = reader.readDouble();
                        break;
                    case 3:
                        message.z = reader.readDouble();
                        break;
                    case 4:
                        message.w = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Quaternion {
            return Quaternion.deserialize(bytes);
        }
    }
}
