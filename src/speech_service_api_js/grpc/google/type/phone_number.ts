/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: google/type/phone_number.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace google.type {
    export class PhoneNumber extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            extension?: string;
        } & (({
            e164_number?: string;
            short_code?: never;
        } | {
            e164_number?: never;
            short_code?: PhoneNumber.ShortCode;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("e164_number" in data && data.e164_number != undefined) {
                    this.e164_number = data.e164_number;
                }
                if ("short_code" in data && data.short_code != undefined) {
                    this.short_code = data.short_code;
                }
                if ("extension" in data && data.extension != undefined) {
                    this.extension = data.extension;
                }
            }
        }
        get e164_number() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set e164_number(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_e164_number() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get short_code() {
            return pb_1.Message.getWrapperField(this, PhoneNumber.ShortCode, 2) as PhoneNumber.ShortCode;
        }
        set short_code(value: PhoneNumber.ShortCode) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_short_code() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get extension() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set extension(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "e164_number" | "short_code";
            } = {
                0: "none",
                1: "e164_number",
                2: "short_code"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            e164_number?: string;
            short_code?: ReturnType<typeof PhoneNumber.ShortCode.prototype.toObject>;
            extension?: string;
        }): PhoneNumber {
            const message = new PhoneNumber({});
            if (data.e164_number != null) {
                message.e164_number = data.e164_number;
            }
            if (data.short_code != null) {
                message.short_code = PhoneNumber.ShortCode.fromObject(data.short_code);
            }
            if (data.extension != null) {
                message.extension = data.extension;
            }
            return message;
        }
        toObject() {
            const data: {
                e164_number?: string;
                short_code?: ReturnType<typeof PhoneNumber.ShortCode.prototype.toObject>;
                extension?: string;
            } = {};
            if (this.e164_number != null) {
                data.e164_number = this.e164_number;
            }
            if (this.short_code != null) {
                data.short_code = this.short_code.toObject();
            }
            if (this.extension != null) {
                data.extension = this.extension;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_e164_number)
                writer.writeString(1, this.e164_number);
            if (this.has_short_code)
                writer.writeMessage(2, this.short_code, () => this.short_code.serialize(writer));
            if (this.extension.length)
                writer.writeString(3, this.extension);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PhoneNumber {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PhoneNumber();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.e164_number = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.short_code, () => message.short_code = PhoneNumber.ShortCode.deserialize(reader));
                        break;
                    case 3:
                        message.extension = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PhoneNumber {
            return PhoneNumber.deserialize(bytes);
        }
    }
    export namespace PhoneNumber {
        export class ShortCode extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                region_code?: string;
                number?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("region_code" in data && data.region_code != undefined) {
                        this.region_code = data.region_code;
                    }
                    if ("number" in data && data.number != undefined) {
                        this.number = data.number;
                    }
                }
            }
            get region_code() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set region_code(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get number() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set number(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                region_code?: string;
                number?: string;
            }): ShortCode {
                const message = new ShortCode({});
                if (data.region_code != null) {
                    message.region_code = data.region_code;
                }
                if (data.number != null) {
                    message.number = data.number;
                }
                return message;
            }
            toObject() {
                const data: {
                    region_code?: string;
                    number?: string;
                } = {};
                if (this.region_code != null) {
                    data.region_code = this.region_code;
                }
                if (this.number != null) {
                    data.number = this.number;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.region_code.length)
                    writer.writeString(1, this.region_code);
                if (this.number.length)
                    writer.writeString(2, this.number);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShortCode {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShortCode();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.region_code = reader.readString();
                            break;
                        case 2:
                            message.number = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShortCode {
                return ShortCode.deserialize(bytes);
            }
        }
    }
}
