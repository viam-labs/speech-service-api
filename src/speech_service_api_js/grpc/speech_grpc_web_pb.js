/**
 * @fileoverview gRPC-Web generated client stub for viamlabs.service.speech.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: speech.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('./google/api/annotations_pb.js')
const proto = {};
proto.viamlabs = {};
proto.viamlabs.service = {};
proto.viamlabs.service.speech = {};
proto.viamlabs.service.speech.v1 = require('./speech_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viamlabs.service.speech.v1.SayRequest,
 *   !proto.viamlabs.service.speech.v1.SayResponse>}
 */
const methodDescriptor_SpeechService_Say = new grpc.web.MethodDescriptor(
  '/viamlabs.service.speech.v1.SpeechService/Say',
  grpc.web.MethodType.UNARY,
  proto.viamlabs.service.speech.v1.SayRequest,
  proto.viamlabs.service.speech.v1.SayResponse,
  /**
   * @param {!proto.viamlabs.service.speech.v1.SayRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viamlabs.service.speech.v1.SayResponse.deserializeBinary
);


/**
 * @param {!proto.viamlabs.service.speech.v1.SayRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viamlabs.service.speech.v1.SayResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viamlabs.service.speech.v1.SayResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient.prototype.say =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/Say',
      request,
      metadata || {},
      methodDescriptor_SpeechService_Say,
      callback);
};


/**
 * @param {!proto.viamlabs.service.speech.v1.SayRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viamlabs.service.speech.v1.SayResponse>}
 *     Promise that resolves to the response
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient.prototype.say =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/Say',
      request,
      metadata || {},
      methodDescriptor_SpeechService_Say);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viamlabs.service.speech.v1.ToTextRequest,
 *   !proto.viamlabs.service.speech.v1.ToTextResponse>}
 */
const methodDescriptor_SpeechService_ToText = new grpc.web.MethodDescriptor(
  '/viamlabs.service.speech.v1.SpeechService/ToText',
  grpc.web.MethodType.UNARY,
  proto.viamlabs.service.speech.v1.ToTextRequest,
  proto.viamlabs.service.speech.v1.ToTextResponse,
  /**
   * @param {!proto.viamlabs.service.speech.v1.ToTextRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viamlabs.service.speech.v1.ToTextResponse.deserializeBinary
);


/**
 * @param {!proto.viamlabs.service.speech.v1.ToTextRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viamlabs.service.speech.v1.ToTextResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viamlabs.service.speech.v1.ToTextResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient.prototype.toText =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/ToText',
      request,
      metadata || {},
      methodDescriptor_SpeechService_ToText,
      callback);
};


/**
 * @param {!proto.viamlabs.service.speech.v1.ToTextRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viamlabs.service.speech.v1.ToTextResponse>}
 *     Promise that resolves to the response
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient.prototype.toText =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/ToText',
      request,
      metadata || {},
      methodDescriptor_SpeechService_ToText);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viamlabs.service.speech.v1.ToSpeechRequest,
 *   !proto.viamlabs.service.speech.v1.ToSpeechResponse>}
 */
const methodDescriptor_SpeechService_ToSpeech = new grpc.web.MethodDescriptor(
  '/viamlabs.service.speech.v1.SpeechService/ToSpeech',
  grpc.web.MethodType.UNARY,
  proto.viamlabs.service.speech.v1.ToSpeechRequest,
  proto.viamlabs.service.speech.v1.ToSpeechResponse,
  /**
   * @param {!proto.viamlabs.service.speech.v1.ToSpeechRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viamlabs.service.speech.v1.ToSpeechResponse.deserializeBinary
);


/**
 * @param {!proto.viamlabs.service.speech.v1.ToSpeechRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viamlabs.service.speech.v1.ToSpeechResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viamlabs.service.speech.v1.ToSpeechResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient.prototype.toSpeech =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/ToSpeech',
      request,
      metadata || {},
      methodDescriptor_SpeechService_ToSpeech,
      callback);
};


/**
 * @param {!proto.viamlabs.service.speech.v1.ToSpeechRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viamlabs.service.speech.v1.ToSpeechResponse>}
 *     Promise that resolves to the response
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient.prototype.toSpeech =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/ToSpeech',
      request,
      metadata || {},
      methodDescriptor_SpeechService_ToSpeech);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viamlabs.service.speech.v1.CompletionRequest,
 *   !proto.viamlabs.service.speech.v1.CompletionResponse>}
 */
const methodDescriptor_SpeechService_Completion = new grpc.web.MethodDescriptor(
  '/viamlabs.service.speech.v1.SpeechService/Completion',
  grpc.web.MethodType.UNARY,
  proto.viamlabs.service.speech.v1.CompletionRequest,
  proto.viamlabs.service.speech.v1.CompletionResponse,
  /**
   * @param {!proto.viamlabs.service.speech.v1.CompletionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viamlabs.service.speech.v1.CompletionResponse.deserializeBinary
);


/**
 * @param {!proto.viamlabs.service.speech.v1.CompletionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viamlabs.service.speech.v1.CompletionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viamlabs.service.speech.v1.CompletionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient.prototype.completion =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/Completion',
      request,
      metadata || {},
      methodDescriptor_SpeechService_Completion,
      callback);
};


/**
 * @param {!proto.viamlabs.service.speech.v1.CompletionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viamlabs.service.speech.v1.CompletionResponse>}
 *     Promise that resolves to the response
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient.prototype.completion =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/Completion',
      request,
      metadata || {},
      methodDescriptor_SpeechService_Completion);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viamlabs.service.speech.v1.GetCommandsRequest,
 *   !proto.viamlabs.service.speech.v1.GetCommandsResponse>}
 */
const methodDescriptor_SpeechService_GetCommands = new grpc.web.MethodDescriptor(
  '/viamlabs.service.speech.v1.SpeechService/GetCommands',
  grpc.web.MethodType.UNARY,
  proto.viamlabs.service.speech.v1.GetCommandsRequest,
  proto.viamlabs.service.speech.v1.GetCommandsResponse,
  /**
   * @param {!proto.viamlabs.service.speech.v1.GetCommandsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viamlabs.service.speech.v1.GetCommandsResponse.deserializeBinary
);


/**
 * @param {!proto.viamlabs.service.speech.v1.GetCommandsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viamlabs.service.speech.v1.GetCommandsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viamlabs.service.speech.v1.GetCommandsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient.prototype.getCommands =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/GetCommands',
      request,
      metadata || {},
      methodDescriptor_SpeechService_GetCommands,
      callback);
};


/**
 * @param {!proto.viamlabs.service.speech.v1.GetCommandsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viamlabs.service.speech.v1.GetCommandsResponse>}
 *     Promise that resolves to the response
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient.prototype.getCommands =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/GetCommands',
      request,
      metadata || {},
      methodDescriptor_SpeechService_GetCommands);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viamlabs.service.speech.v1.ListenTriggerRequest,
 *   !proto.viamlabs.service.speech.v1.ListenTriggerResponse>}
 */
const methodDescriptor_SpeechService_ListenTrigger = new grpc.web.MethodDescriptor(
  '/viamlabs.service.speech.v1.SpeechService/ListenTrigger',
  grpc.web.MethodType.UNARY,
  proto.viamlabs.service.speech.v1.ListenTriggerRequest,
  proto.viamlabs.service.speech.v1.ListenTriggerResponse,
  /**
   * @param {!proto.viamlabs.service.speech.v1.ListenTriggerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viamlabs.service.speech.v1.ListenTriggerResponse.deserializeBinary
);


/**
 * @param {!proto.viamlabs.service.speech.v1.ListenTriggerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viamlabs.service.speech.v1.ListenTriggerResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viamlabs.service.speech.v1.ListenTriggerResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient.prototype.listenTrigger =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/ListenTrigger',
      request,
      metadata || {},
      methodDescriptor_SpeechService_ListenTrigger,
      callback);
};


/**
 * @param {!proto.viamlabs.service.speech.v1.ListenTriggerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viamlabs.service.speech.v1.ListenTriggerResponse>}
 *     Promise that resolves to the response
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient.prototype.listenTrigger =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/ListenTrigger',
      request,
      metadata || {},
      methodDescriptor_SpeechService_ListenTrigger);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viamlabs.service.speech.v1.ListenRequest,
 *   !proto.viamlabs.service.speech.v1.ListenResponse>}
 */
const methodDescriptor_SpeechService_Listen = new grpc.web.MethodDescriptor(
  '/viamlabs.service.speech.v1.SpeechService/Listen',
  grpc.web.MethodType.UNARY,
  proto.viamlabs.service.speech.v1.ListenRequest,
  proto.viamlabs.service.speech.v1.ListenResponse,
  /**
   * @param {!proto.viamlabs.service.speech.v1.ListenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viamlabs.service.speech.v1.ListenResponse.deserializeBinary
);


/**
 * @param {!proto.viamlabs.service.speech.v1.ListenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viamlabs.service.speech.v1.ListenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viamlabs.service.speech.v1.ListenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient.prototype.listen =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/Listen',
      request,
      metadata || {},
      methodDescriptor_SpeechService_Listen,
      callback);
};


/**
 * @param {!proto.viamlabs.service.speech.v1.ListenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viamlabs.service.speech.v1.ListenResponse>}
 *     Promise that resolves to the response
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient.prototype.listen =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/Listen',
      request,
      metadata || {},
      methodDescriptor_SpeechService_Listen);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.viamlabs.service.speech.v1.IsSpeakingRequest,
 *   !proto.viamlabs.service.speech.v1.IsSpeakingResponse>}
 */
const methodDescriptor_SpeechService_IsSpeaking = new grpc.web.MethodDescriptor(
  '/viamlabs.service.speech.v1.SpeechService/IsSpeaking',
  grpc.web.MethodType.UNARY,
  proto.viamlabs.service.speech.v1.IsSpeakingRequest,
  proto.viamlabs.service.speech.v1.IsSpeakingResponse,
  /**
   * @param {!proto.viamlabs.service.speech.v1.IsSpeakingRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.viamlabs.service.speech.v1.IsSpeakingResponse.deserializeBinary
);


/**
 * @param {!proto.viamlabs.service.speech.v1.IsSpeakingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.viamlabs.service.speech.v1.IsSpeakingResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.viamlabs.service.speech.v1.IsSpeakingResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.viamlabs.service.speech.v1.SpeechServiceClient.prototype.isSpeaking =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/IsSpeaking',
      request,
      metadata || {},
      methodDescriptor_SpeechService_IsSpeaking,
      callback);
};


/**
 * @param {!proto.viamlabs.service.speech.v1.IsSpeakingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.viamlabs.service.speech.v1.IsSpeakingResponse>}
 *     Promise that resolves to the response
 */
proto.viamlabs.service.speech.v1.SpeechServicePromiseClient.prototype.isSpeaking =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/viamlabs.service.speech.v1.SpeechService/IsSpeaking',
      request,
      metadata || {},
      methodDescriptor_SpeechService_IsSpeaking);
};


module.exports = proto.viamlabs.service.speech.v1;

