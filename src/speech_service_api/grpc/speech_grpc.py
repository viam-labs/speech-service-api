# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: speech.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.protobuf.struct_pb2
from . import speech_pb2


class SpeechServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Say(self, stream: 'grpclib.server.Stream[speech_pb2.SayRequest, speech_pb2.SayResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ToText(self, stream: 'grpclib.server.Stream[speech_pb2.ToTextRequest, speech_pb2.ToTextResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ToSpeech(self, stream: 'grpclib.server.Stream[speech_pb2.ToSpeechRequest, speech_pb2.ToSpeechResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Completion(self, stream: 'grpclib.server.Stream[speech_pb2.CompletionRequest, speech_pb2.CompletionResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetCommands(self, stream: 'grpclib.server.Stream[speech_pb2.GetCommandsRequest, speech_pb2.GetCommandsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListenTrigger(self, stream: 'grpclib.server.Stream[speech_pb2.ListenTriggerRequest, speech_pb2.ListenTriggerResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Listen(self, stream: 'grpclib.server.Stream[speech_pb2.ListenRequest, speech_pb2.ListenResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ListenInBackground(self, stream: 'grpclib.server.Stream[speech_pb2.ListenInBackgroundRequest, speech_pb2.ListenInBackgroundResponse]') -> None:
        pass

    @abc.abstractmethod
    async def IsSpeaking(self, stream: 'grpclib.server.Stream[speech_pb2.IsSpeakingRequest, speech_pb2.IsSpeakingResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/viamlabs.service.speech.v1.SpeechService/Say': grpclib.const.Handler(
                self.Say,
                grpclib.const.Cardinality.UNARY_UNARY,
                speech_pb2.SayRequest,
                speech_pb2.SayResponse,
            ),
            '/viamlabs.service.speech.v1.SpeechService/ToText': grpclib.const.Handler(
                self.ToText,
                grpclib.const.Cardinality.UNARY_UNARY,
                speech_pb2.ToTextRequest,
                speech_pb2.ToTextResponse,
            ),
            '/viamlabs.service.speech.v1.SpeechService/ToSpeech': grpclib.const.Handler(
                self.ToSpeech,
                grpclib.const.Cardinality.UNARY_UNARY,
                speech_pb2.ToSpeechRequest,
                speech_pb2.ToSpeechResponse,
            ),
            '/viamlabs.service.speech.v1.SpeechService/Completion': grpclib.const.Handler(
                self.Completion,
                grpclib.const.Cardinality.UNARY_UNARY,
                speech_pb2.CompletionRequest,
                speech_pb2.CompletionResponse,
            ),
            '/viamlabs.service.speech.v1.SpeechService/GetCommands': grpclib.const.Handler(
                self.GetCommands,
                grpclib.const.Cardinality.UNARY_UNARY,
                speech_pb2.GetCommandsRequest,
                speech_pb2.GetCommandsResponse,
            ),
            '/viamlabs.service.speech.v1.SpeechService/ListenTrigger': grpclib.const.Handler(
                self.ListenTrigger,
                grpclib.const.Cardinality.UNARY_UNARY,
                speech_pb2.ListenTriggerRequest,
                speech_pb2.ListenTriggerResponse,
            ),
            '/viamlabs.service.speech.v1.SpeechService/Listen': grpclib.const.Handler(
                self.Listen,
                grpclib.const.Cardinality.UNARY_UNARY,
                speech_pb2.ListenRequest,
                speech_pb2.ListenResponse,
            ),
            '/viamlabs.service.speech.v1.SpeechService/ListenInBackground': grpclib.const.Handler(
                self.ListenInBackground,
                grpclib.const.Cardinality.UNARY_STREAM,
                speech_pb2.ListenInBackgroundRequest,
                speech_pb2.ListenInBackgroundResponse,
            ),
            '/viamlabs.service.speech.v1.SpeechService/IsSpeaking': grpclib.const.Handler(
                self.IsSpeaking,
                grpclib.const.Cardinality.UNARY_UNARY,
                speech_pb2.IsSpeakingRequest,
                speech_pb2.IsSpeakingResponse,
            ),
        }


class SpeechServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Say = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/Say',
            speech_pb2.SayRequest,
            speech_pb2.SayResponse,
        )
        self.ToText = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/ToText',
            speech_pb2.ToTextRequest,
            speech_pb2.ToTextResponse,
        )
        self.ToSpeech = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/ToSpeech',
            speech_pb2.ToSpeechRequest,
            speech_pb2.ToSpeechResponse,
        )
        self.Completion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/Completion',
            speech_pb2.CompletionRequest,
            speech_pb2.CompletionResponse,
        )
        self.GetCommands = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/GetCommands',
            speech_pb2.GetCommandsRequest,
            speech_pb2.GetCommandsResponse,
        )
        self.ListenTrigger = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/ListenTrigger',
            speech_pb2.ListenTriggerRequest,
            speech_pb2.ListenTriggerResponse,
        )
        self.Listen = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/Listen',
            speech_pb2.ListenRequest,
            speech_pb2.ListenResponse,
        )
        self.ListenInBackground = grpclib.client.UnaryStreamMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/ListenInBackground',
            speech_pb2.ListenInBackgroundRequest,
            speech_pb2.ListenInBackgroundResponse,
        )
        self.IsSpeaking = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.speech.v1.SpeechService/IsSpeaking',
            speech_pb2.IsSpeakingRequest,
            speech_pb2.IsSpeakingResponse,
        )
