"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ParsedExpr(google.protobuf.message.Message):
    """A representation of the abstract syntax of the Common Expression Language.

    An expression together with source information as returned by the parser.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPR_FIELD_NUMBER: builtins.int
    SOURCE_INFO_FIELD_NUMBER: builtins.int
    @property
    def expr(self) -> global___Expr:
        """The parsed expression."""
    @property
    def source_info(self) -> global___SourceInfo:
        """The source info derived from input that generated the parsed `expr`."""
    def __init__(
        self,
        *,
        expr: global___Expr | None = ...,
        source_info: global___SourceInfo | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["expr", b"expr", "source_info", b"source_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["expr", b"expr", "source_info", b"source_info"]) -> None: ...

global___ParsedExpr = ParsedExpr

@typing_extensions.final
class Expr(google.protobuf.message.Message):
    """An abstract representation of a common expression.

    Expressions are abstractly represented as a collection of identifiers,
    select statements, function calls, literals, and comprehensions. All
    operators with the exception of the '.' operator are modelled as function
    calls. This makes it easy to represent new operators into the existing AST.

    All references within expressions must resolve to a
    [Decl][google.api.expr.v1alpha1.Decl] provided at type-check for an
    expression to be valid. A reference may either be a bare identifier `name` or
    a qualified identifier `google.api.name`. References may either refer to a
    value or a function declaration.

    For example, the expression `google.api.name.startsWith('expr')` references
    the declaration `google.api.name` within a
    [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression, and the
    function declaration `startsWith`.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Ident(google.protobuf.message.Message):
        """An identifier expression. e.g. `request`."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Required. Holds a single, unqualified identifier, possibly preceded by a
        '.'.

        Qualified names are represented by the
        [Expr.Select][google.api.expr.v1alpha1.Expr.Select] expression.
        """
        def __init__(
            self,
            *,
            name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["name", b"name"]) -> None: ...

    @typing_extensions.final
    class Select(google.protobuf.message.Message):
        """A field selection expression. e.g. `request.auth`."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        OPERAND_FIELD_NUMBER: builtins.int
        FIELD_FIELD_NUMBER: builtins.int
        TEST_ONLY_FIELD_NUMBER: builtins.int
        @property
        def operand(self) -> global___Expr:
            """Required. The target of the selection expression.

            For example, in the select expression `request.auth`, the `request`
            portion of the expression is the `operand`.
            """
        field: builtins.str
        """Required. The name of the field to select.

        For example, in the select expression `request.auth`, the `auth` portion
        of the expression would be the `field`.
        """
        test_only: builtins.bool
        """Whether the select is to be interpreted as a field presence test.

        This results from the macro `has(request.auth)`.
        """
        def __init__(
            self,
            *,
            operand: global___Expr | None = ...,
            field: builtins.str = ...,
            test_only: builtins.bool = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["operand", b"operand"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["field", b"field", "operand", b"operand", "test_only", b"test_only"]) -> None: ...

    @typing_extensions.final
    class Call(google.protobuf.message.Message):
        """A call expression, including calls to predefined functions and operators.

        For example, `value == 10`, `size(map_value)`.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TARGET_FIELD_NUMBER: builtins.int
        FUNCTION_FIELD_NUMBER: builtins.int
        ARGS_FIELD_NUMBER: builtins.int
        @property
        def target(self) -> global___Expr:
            """The target of an method call-style expression. For example, `x` in
            `x.f()`.
            """
        function: builtins.str
        """Required. The name of the function or method being called."""
        @property
        def args(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]:
            """The arguments."""
        def __init__(
            self,
            *,
            target: global___Expr | None = ...,
            function: builtins.str = ...,
            args: collections.abc.Iterable[global___Expr] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["target", b"target"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["args", b"args", "function", b"function", "target", b"target"]) -> None: ...

    @typing_extensions.final
    class CreateList(google.protobuf.message.Message):
        """A list creation expression.

        Lists may either be homogenous, e.g. `[1, 2, 3]`, or heterogeneous, e.g.
        `dyn([1, 'hello', 2.0])`
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ELEMENTS_FIELD_NUMBER: builtins.int
        OPTIONAL_INDICES_FIELD_NUMBER: builtins.int
        @property
        def elements(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]:
            """The elements part of the list."""
        @property
        def optional_indices(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """The indices within the elements list which are marked as optional
            elements.

            When an optional-typed value is present, the value it contains
            is included in the list. If the optional-typed value is absent, the list
            element is omitted from the CreateList result.
            """
        def __init__(
            self,
            *,
            elements: collections.abc.Iterable[global___Expr] | None = ...,
            optional_indices: collections.abc.Iterable[builtins.int] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["elements", b"elements", "optional_indices", b"optional_indices"]) -> None: ...

    @typing_extensions.final
    class CreateStruct(google.protobuf.message.Message):
        """A map or message creation expression.

        Maps are constructed as `{'key_name': 'value'}`. Message construction is
        similar, but prefixed with a type name and composed of field ids:
        `types.MyType{field_id: 'value'}`.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing_extensions.final
        class Entry(google.protobuf.message.Message):
            """Represents an entry."""

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            ID_FIELD_NUMBER: builtins.int
            FIELD_KEY_FIELD_NUMBER: builtins.int
            MAP_KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            OPTIONAL_ENTRY_FIELD_NUMBER: builtins.int
            id: builtins.int
            """Required. An id assigned to this node by the parser which is unique
            in a given expression tree. This is used to associate type
            information and other attributes to the node.
            """
            field_key: builtins.str
            """The field key for a message creator statement."""
            @property
            def map_key(self) -> global___Expr:
                """The key expression for a map creation statement."""
            @property
            def value(self) -> global___Expr:
                """Required. The value assigned to the key.

                If the optional_entry field is true, the expression must resolve to an
                optional-typed value. If the optional value is present, the key will be
                set; however, if the optional value is absent, the key will be unset.
                """
            optional_entry: builtins.bool
            """Whether the key-value pair is optional."""
            def __init__(
                self,
                *,
                id: builtins.int = ...,
                field_key: builtins.str = ...,
                map_key: global___Expr | None = ...,
                value: global___Expr | None = ...,
                optional_entry: builtins.bool = ...,
            ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["field_key", b"field_key", "key_kind", b"key_kind", "map_key", b"map_key", "value", b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["field_key", b"field_key", "id", b"id", "key_kind", b"key_kind", "map_key", b"map_key", "optional_entry", b"optional_entry", "value", b"value"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["key_kind", b"key_kind"]) -> typing_extensions.Literal["field_key", "map_key"] | None: ...

        MESSAGE_NAME_FIELD_NUMBER: builtins.int
        ENTRIES_FIELD_NUMBER: builtins.int
        message_name: builtins.str
        """The type name of the message to be created, empty when creating map
        literals.
        """
        @property
        def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr.CreateStruct.Entry]:
            """The entries in the creation expression."""
        def __init__(
            self,
            *,
            message_name: builtins.str = ...,
            entries: collections.abc.Iterable[global___Expr.CreateStruct.Entry] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["entries", b"entries", "message_name", b"message_name"]) -> None: ...

    @typing_extensions.final
    class Comprehension(google.protobuf.message.Message):
        """A comprehension expression applied to a list or map.

        Comprehensions are not part of the core syntax, but enabled with macros.
        A macro matches a specific call signature within a parsed AST and replaces
        the call with an alternate AST block. Macro expansion happens at parse
        time.

        The following macros are supported within CEL:

        Aggregate type macros may be applied to all elements in a list or all keys
        in a map:

        *  `all`, `exists`, `exists_one` -  test a predicate expression against
           the inputs and return `true` if the predicate is satisfied for all,
           any, or only one value `list.all(x, x < 10)`.
        *  `filter` - test a predicate expression against the inputs and return
           the subset of elements which satisfy the predicate:
           `payments.filter(p, p > 1000)`.
        *  `map` - apply an expression to all elements in the input and return the
           output aggregate type: `[1, 2, 3].map(i, i * i)`.

        The `has(m.x)` macro tests whether the property `x` is present in struct
        `m`. The semantics of this macro depend on the type of `m`. For proto2
        messages `has(m.x)` is defined as 'defined, but not set`. For proto3, the
        macro tests whether the property is set to its default. For map and struct
        types, the macro tests whether the property `x` is defined on `m`.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ITER_VAR_FIELD_NUMBER: builtins.int
        ITER_RANGE_FIELD_NUMBER: builtins.int
        ACCU_VAR_FIELD_NUMBER: builtins.int
        ACCU_INIT_FIELD_NUMBER: builtins.int
        LOOP_CONDITION_FIELD_NUMBER: builtins.int
        LOOP_STEP_FIELD_NUMBER: builtins.int
        RESULT_FIELD_NUMBER: builtins.int
        iter_var: builtins.str
        """The name of the iteration variable."""
        @property
        def iter_range(self) -> global___Expr:
            """The range over which var iterates."""
        accu_var: builtins.str
        """The name of the variable used for accumulation of the result."""
        @property
        def accu_init(self) -> global___Expr:
            """The initial value of the accumulator."""
        @property
        def loop_condition(self) -> global___Expr:
            """An expression which can contain iter_var and accu_var.

            Returns false when the result has been computed and may be used as
            a hint to short-circuit the remainder of the comprehension.
            """
        @property
        def loop_step(self) -> global___Expr:
            """An expression which can contain iter_var and accu_var.

            Computes the next value of accu_var.
            """
        @property
        def result(self) -> global___Expr:
            """An expression which can contain accu_var.

            Computes the result.
            """
        def __init__(
            self,
            *,
            iter_var: builtins.str = ...,
            iter_range: global___Expr | None = ...,
            accu_var: builtins.str = ...,
            accu_init: global___Expr | None = ...,
            loop_condition: global___Expr | None = ...,
            loop_step: global___Expr | None = ...,
            result: global___Expr | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["accu_init", b"accu_init", "iter_range", b"iter_range", "loop_condition", b"loop_condition", "loop_step", b"loop_step", "result", b"result"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["accu_init", b"accu_init", "accu_var", b"accu_var", "iter_range", b"iter_range", "iter_var", b"iter_var", "loop_condition", b"loop_condition", "loop_step", b"loop_step", "result", b"result"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    CONST_EXPR_FIELD_NUMBER: builtins.int
    IDENT_EXPR_FIELD_NUMBER: builtins.int
    SELECT_EXPR_FIELD_NUMBER: builtins.int
    CALL_EXPR_FIELD_NUMBER: builtins.int
    LIST_EXPR_FIELD_NUMBER: builtins.int
    STRUCT_EXPR_FIELD_NUMBER: builtins.int
    COMPREHENSION_EXPR_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Required. An id assigned to this node by the parser which is unique in a
    given expression tree. This is used to associate type information and other
    attributes to a node in the parse tree.
    """
    @property
    def const_expr(self) -> global___Constant:
        """A literal expression."""
    @property
    def ident_expr(self) -> global___Expr.Ident:
        """An identifier expression."""
    @property
    def select_expr(self) -> global___Expr.Select:
        """A field selection expression, e.g. `request.auth`."""
    @property
    def call_expr(self) -> global___Expr.Call:
        """A call expression, including calls to predefined functions and operators."""
    @property
    def list_expr(self) -> global___Expr.CreateList:
        """A list creation expression."""
    @property
    def struct_expr(self) -> global___Expr.CreateStruct:
        """A map or message creation expression."""
    @property
    def comprehension_expr(self) -> global___Expr.Comprehension:
        """A comprehension expression."""
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        const_expr: global___Constant | None = ...,
        ident_expr: global___Expr.Ident | None = ...,
        select_expr: global___Expr.Select | None = ...,
        call_expr: global___Expr.Call | None = ...,
        list_expr: global___Expr.CreateList | None = ...,
        struct_expr: global___Expr.CreateStruct | None = ...,
        comprehension_expr: global___Expr.Comprehension | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["call_expr", b"call_expr", "comprehension_expr", b"comprehension_expr", "const_expr", b"const_expr", "expr_kind", b"expr_kind", "ident_expr", b"ident_expr", "list_expr", b"list_expr", "select_expr", b"select_expr", "struct_expr", b"struct_expr"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["call_expr", b"call_expr", "comprehension_expr", b"comprehension_expr", "const_expr", b"const_expr", "expr_kind", b"expr_kind", "id", b"id", "ident_expr", b"ident_expr", "list_expr", b"list_expr", "select_expr", b"select_expr", "struct_expr", b"struct_expr"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["expr_kind", b"expr_kind"]) -> typing_extensions.Literal["const_expr", "ident_expr", "select_expr", "call_expr", "list_expr", "struct_expr", "comprehension_expr"] | None: ...

global___Expr = Expr

@typing_extensions.final
class Constant(google.protobuf.message.Message):
    """Represents a primitive literal.

    Named 'Constant' here for backwards compatibility.

    This is similar as the primitives supported in the well-known type
    `google.protobuf.Value`, but richer so it can represent CEL's full range of
    primitives.

    Lists and structs are not included as constants as these aggregate types may
    contain [Expr][google.api.expr.v1alpha1.Expr] elements which require
    evaluation and are thus not constant.

    Examples of literals include: `"hello"`, `b'bytes'`, `1u`, `4.2`, `-2`,
    `true`, `null`.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NULL_VALUE_FIELD_NUMBER: builtins.int
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    INT64_VALUE_FIELD_NUMBER: builtins.int
    UINT64_VALUE_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    STRING_VALUE_FIELD_NUMBER: builtins.int
    BYTES_VALUE_FIELD_NUMBER: builtins.int
    DURATION_VALUE_FIELD_NUMBER: builtins.int
    TIMESTAMP_VALUE_FIELD_NUMBER: builtins.int
    null_value: google.protobuf.struct_pb2.NullValue.ValueType
    """null value."""
    bool_value: builtins.bool
    """boolean value."""
    int64_value: builtins.int
    """int64 value."""
    uint64_value: builtins.int
    """uint64 value."""
    double_value: builtins.float
    """double value."""
    string_value: builtins.str
    """string value."""
    bytes_value: builtins.bytes
    """bytes value."""
    @property
    def duration_value(self) -> google.protobuf.duration_pb2.Duration:
        """protobuf.Duration value.

        Deprecated: duration is no longer considered a builtin cel type.
        """
    @property
    def timestamp_value(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """protobuf.Timestamp value.

        Deprecated: timestamp is no longer considered a builtin cel type.
        """
    def __init__(
        self,
        *,
        null_value: google.protobuf.struct_pb2.NullValue.ValueType = ...,
        bool_value: builtins.bool = ...,
        int64_value: builtins.int = ...,
        uint64_value: builtins.int = ...,
        double_value: builtins.float = ...,
        string_value: builtins.str = ...,
        bytes_value: builtins.bytes = ...,
        duration_value: google.protobuf.duration_pb2.Duration | None = ...,
        timestamp_value: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bool_value", b"bool_value", "bytes_value", b"bytes_value", "constant_kind", b"constant_kind", "double_value", b"double_value", "duration_value", b"duration_value", "int64_value", b"int64_value", "null_value", b"null_value", "string_value", b"string_value", "timestamp_value", b"timestamp_value", "uint64_value", b"uint64_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bool_value", b"bool_value", "bytes_value", b"bytes_value", "constant_kind", b"constant_kind", "double_value", b"double_value", "duration_value", b"duration_value", "int64_value", b"int64_value", "null_value", b"null_value", "string_value", b"string_value", "timestamp_value", b"timestamp_value", "uint64_value", b"uint64_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["constant_kind", b"constant_kind"]) -> typing_extensions.Literal["null_value", "bool_value", "int64_value", "uint64_value", "double_value", "string_value", "bytes_value", "duration_value", "timestamp_value"] | None: ...

global___Constant = Constant

@typing_extensions.final
class SourceInfo(google.protobuf.message.Message):
    """Source information collected at parse time."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Extension(google.protobuf.message.Message):
        """An extension that was requested for the source expression."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _Component:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _ComponentEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[SourceInfo.Extension._Component.ValueType], builtins.type):  # noqa: F821
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            COMPONENT_UNSPECIFIED: SourceInfo.Extension._Component.ValueType  # 0
            """Unspecified, default."""
            COMPONENT_PARSER: SourceInfo.Extension._Component.ValueType  # 1
            """Parser. Converts a CEL string to an AST."""
            COMPONENT_TYPE_CHECKER: SourceInfo.Extension._Component.ValueType  # 2
            """Type checker. Checks that references in an AST are defined and types
            agree.
            """
            COMPONENT_RUNTIME: SourceInfo.Extension._Component.ValueType  # 3
            """Runtime. Evaluates a parsed and optionally checked CEL AST against a
            context.
            """

        class Component(_Component, metaclass=_ComponentEnumTypeWrapper):
            """CEL component specifier."""

        COMPONENT_UNSPECIFIED: SourceInfo.Extension.Component.ValueType  # 0
        """Unspecified, default."""
        COMPONENT_PARSER: SourceInfo.Extension.Component.ValueType  # 1
        """Parser. Converts a CEL string to an AST."""
        COMPONENT_TYPE_CHECKER: SourceInfo.Extension.Component.ValueType  # 2
        """Type checker. Checks that references in an AST are defined and types
        agree.
        """
        COMPONENT_RUNTIME: SourceInfo.Extension.Component.ValueType  # 3
        """Runtime. Evaluates a parsed and optionally checked CEL AST against a
        context.
        """

        @typing_extensions.final
        class Version(google.protobuf.message.Message):
            """Version"""

            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            MAJOR_FIELD_NUMBER: builtins.int
            MINOR_FIELD_NUMBER: builtins.int
            major: builtins.int
            """Major version changes indicate different required support level from
            the required components.
            """
            minor: builtins.int
            """Minor version changes must not change the observed behavior from
            existing implementations, but may be provided informationally.
            """
            def __init__(
                self,
                *,
                major: builtins.int = ...,
                minor: builtins.int = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["major", b"major", "minor", b"minor"]) -> None: ...

        ID_FIELD_NUMBER: builtins.int
        AFFECTED_COMPONENTS_FIELD_NUMBER: builtins.int
        VERSION_FIELD_NUMBER: builtins.int
        id: builtins.str
        """Identifier for the extension. Example: constant_folding"""
        @property
        def affected_components(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___SourceInfo.Extension.Component.ValueType]:
            """If set, the listed components must understand the extension for the
            expression to evaluate correctly.

            This field has set semantics, repeated values should be deduplicated.
            """
        @property
        def version(self) -> global___SourceInfo.Extension.Version:
            """Version info. May be skipped if it isn't meaningful for the extension.
            (for example constant_folding might always be v0.0).
            """
        def __init__(
            self,
            *,
            id: builtins.str = ...,
            affected_components: collections.abc.Iterable[global___SourceInfo.Extension.Component.ValueType] | None = ...,
            version: global___SourceInfo.Extension.Version | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["version", b"version"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["affected_components", b"affected_components", "id", b"id", "version", b"version"]) -> None: ...

    @typing_extensions.final
    class PositionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.int
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class MacroCallsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___Expr: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___Expr | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    SYNTAX_VERSION_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    LINE_OFFSETS_FIELD_NUMBER: builtins.int
    POSITIONS_FIELD_NUMBER: builtins.int
    MACRO_CALLS_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    syntax_version: builtins.str
    """The syntax version of the source, e.g. `cel1`."""
    location: builtins.str
    """The location name. All position information attached to an expression is
    relative to this location.

    The location could be a file, UI element, or similar. For example,
    `acme/app/AnvilPolicy.cel`.
    """
    @property
    def line_offsets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Monotonically increasing list of code point offsets where newlines
        `\\n` appear.

        The line number of a given position is the index `i` where for a given
        `id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The
        column may be derivd from `id_positions[id] - line_offsets[i]`.
        """
    @property
    def positions(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.int]:
        """A map from the parse node id (e.g. `Expr.id`) to the code point offset
        within the source.
        """
    @property
    def macro_calls(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___Expr]:
        """A map from the parse node id where a macro replacement was made to the
        call `Expr` that resulted in a macro expansion.

        For example, `has(value.field)` is a function call that is replaced by a
        `test_only` field selection in the AST. Likewise, the call
        `list.exists(e, e > 10)` translates to a comprehension expression. The key
        in the map corresponds to the expression id of the expanded macro, and the
        value is the call `Expr` that was replaced.
        """
    @property
    def extensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SourceInfo.Extension]:
        """A list of tags for extensions that were used while parsing or type checking
        the source expression. For example, optimizations that require special
        runtime support may be specified.

        These are used to check feature support between components in separate
        implementations. This can be used to either skip redundant work or
        report an error if the extension is unsupported.
        """
    def __init__(
        self,
        *,
        syntax_version: builtins.str = ...,
        location: builtins.str = ...,
        line_offsets: collections.abc.Iterable[builtins.int] | None = ...,
        positions: collections.abc.Mapping[builtins.int, builtins.int] | None = ...,
        macro_calls: collections.abc.Mapping[builtins.int, global___Expr] | None = ...,
        extensions: collections.abc.Iterable[global___SourceInfo.Extension] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["extensions", b"extensions", "line_offsets", b"line_offsets", "location", b"location", "macro_calls", b"macro_calls", "positions", b"positions", "syntax_version", b"syntax_version"]) -> None: ...

global___SourceInfo = SourceInfo

@typing_extensions.final
class SourcePosition(google.protobuf.message.Message):
    """A specific position in source."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOCATION_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    LINE_FIELD_NUMBER: builtins.int
    COLUMN_FIELD_NUMBER: builtins.int
    location: builtins.str
    """The soucre location name (e.g. file name)."""
    offset: builtins.int
    """The UTF-8 code unit offset."""
    line: builtins.int
    """The 1-based index of the starting line in the source text
    where the issue occurs, or 0 if unknown.
    """
    column: builtins.int
    """The 0-based index of the starting position within the line of source text
    where the issue occurs.  Only meaningful if line is nonzero.
    """
    def __init__(
        self,
        *,
        location: builtins.str = ...,
        offset: builtins.int = ...,
        line: builtins.int = ...,
        column: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["column", b"column", "line", b"line", "location", b"location", "offset", b"offset"]) -> None: ...

global___SourcePosition = SourcePosition
