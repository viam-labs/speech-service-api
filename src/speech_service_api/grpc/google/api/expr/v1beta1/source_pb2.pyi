"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2019 Google LLC.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class SourceInfo(google.protobuf.message.Message):
    """Source information collected at parse time."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class PositionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.int
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    LOCATION_FIELD_NUMBER: builtins.int
    LINE_OFFSETS_FIELD_NUMBER: builtins.int
    POSITIONS_FIELD_NUMBER: builtins.int
    location: builtins.str
    """The location name. All position information attached to an expression is
    relative to this location.

    The location could be a file, UI element, or similar. For example,
    `acme/app/AnvilPolicy.cel`.
    """
    @property
    def line_offsets(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Monotonically increasing list of character offsets where newlines appear.

        The line number of a given position is the index `i` where for a given
        `id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The
        column may be derivd from `id_positions[id] - line_offsets[i]`.
        """
    @property
    def positions(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.int]:
        """A map from the parse node id (e.g. `Expr.id`) to the character offset
        within source.
        """
    def __init__(
        self,
        *,
        location: builtins.str = ...,
        line_offsets: collections.abc.Iterable[builtins.int] | None = ...,
        positions: collections.abc.Mapping[builtins.int, builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["line_offsets", b"line_offsets", "location", b"location", "positions", b"positions"]) -> None: ...

global___SourceInfo = SourceInfo

@typing_extensions.final
class SourcePosition(google.protobuf.message.Message):
    """A specific position in source."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOCATION_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    LINE_FIELD_NUMBER: builtins.int
    COLUMN_FIELD_NUMBER: builtins.int
    location: builtins.str
    """The soucre location name (e.g. file name)."""
    offset: builtins.int
    """The character offset."""
    line: builtins.int
    """The 1-based index of the starting line in the source text
    where the issue occurs, or 0 if unknown.
    """
    column: builtins.int
    """The 0-based index of the starting position within the line of source text
    where the issue occurs.  Only meaningful if line is nonzer..
    """
    def __init__(
        self,
        *,
        location: builtins.str = ...,
        offset: builtins.int = ...,
        line: builtins.int = ...,
        column: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["column", b"column", "line", b"line", "location", b"location", "offset", b"offset"]) -> None: ...

global___SourcePosition = SourcePosition
