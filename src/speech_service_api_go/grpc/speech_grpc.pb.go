// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: speech.proto

package speech_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpeechService_Say_FullMethodName           = "/viamlabs.service.speech.v1.SpeechService/Say"
	SpeechService_ToText_FullMethodName        = "/viamlabs.service.speech.v1.SpeechService/ToText"
	SpeechService_ToSpeech_FullMethodName      = "/viamlabs.service.speech.v1.SpeechService/ToSpeech"
	SpeechService_Completion_FullMethodName    = "/viamlabs.service.speech.v1.SpeechService/Completion"
	SpeechService_GetCommands_FullMethodName   = "/viamlabs.service.speech.v1.SpeechService/GetCommands"
	SpeechService_ListenTrigger_FullMethodName = "/viamlabs.service.speech.v1.SpeechService/ListenTrigger"
	SpeechService_IsSpeaking_FullMethodName    = "/viamlabs.service.speech.v1.SpeechService/IsSpeaking"
)

// SpeechServiceClient is the client API for SpeechService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechServiceClient interface {
	Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error)
	ToText(ctx context.Context, in *ToTextRequest, opts ...grpc.CallOption) (*ToTextResponse, error)
	ToSpeech(ctx context.Context, in *ToSpeechRequest, opts ...grpc.CallOption) (*ToSpeechResponse, error)
	Completion(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (*CompletionResponse, error)
	GetCommands(ctx context.Context, in *GetCommandsRequest, opts ...grpc.CallOption) (*GetCommandsResponse, error)
	ListenTrigger(ctx context.Context, in *ListenTriggerRequest, opts ...grpc.CallOption) (*ListenTriggerResponse, error)
	IsSpeaking(ctx context.Context, in *IsSpeakingRequest, opts ...grpc.CallOption) (*IsSpeakingResponse, error)
}

type speechServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechServiceClient(cc grpc.ClientConnInterface) SpeechServiceClient {
	return &speechServiceClient{cc}
}

func (c *speechServiceClient) Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error) {
	out := new(SayResponse)
	err := c.cc.Invoke(ctx, SpeechService_Say_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechServiceClient) ToText(ctx context.Context, in *ToTextRequest, opts ...grpc.CallOption) (*ToTextResponse, error) {
	out := new(ToTextResponse)
	err := c.cc.Invoke(ctx, SpeechService_ToText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechServiceClient) ToSpeech(ctx context.Context, in *ToSpeechRequest, opts ...grpc.CallOption) (*ToSpeechResponse, error) {
	out := new(ToSpeechResponse)
	err := c.cc.Invoke(ctx, SpeechService_ToSpeech_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechServiceClient) Completion(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (*CompletionResponse, error) {
	out := new(CompletionResponse)
	err := c.cc.Invoke(ctx, SpeechService_Completion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechServiceClient) GetCommands(ctx context.Context, in *GetCommandsRequest, opts ...grpc.CallOption) (*GetCommandsResponse, error) {
	out := new(GetCommandsResponse)
	err := c.cc.Invoke(ctx, SpeechService_GetCommands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechServiceClient) ListenTrigger(ctx context.Context, in *ListenTriggerRequest, opts ...grpc.CallOption) (*ListenTriggerResponse, error) {
	out := new(ListenTriggerResponse)
	err := c.cc.Invoke(ctx, SpeechService_ListenTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechServiceClient) IsSpeaking(ctx context.Context, in *IsSpeakingRequest, opts ...grpc.CallOption) (*IsSpeakingResponse, error) {
	out := new(IsSpeakingResponse)
	err := c.cc.Invoke(ctx, SpeechService_IsSpeaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeechServiceServer is the server API for SpeechService service.
// All implementations must embed UnimplementedSpeechServiceServer
// for forward compatibility
type SpeechServiceServer interface {
	Say(context.Context, *SayRequest) (*SayResponse, error)
	ToText(context.Context, *ToTextRequest) (*ToTextResponse, error)
	ToSpeech(context.Context, *ToSpeechRequest) (*ToSpeechResponse, error)
	Completion(context.Context, *CompletionRequest) (*CompletionResponse, error)
	GetCommands(context.Context, *GetCommandsRequest) (*GetCommandsResponse, error)
	ListenTrigger(context.Context, *ListenTriggerRequest) (*ListenTriggerResponse, error)
	IsSpeaking(context.Context, *IsSpeakingRequest) (*IsSpeakingResponse, error)
	mustEmbedUnimplementedSpeechServiceServer()
}

// UnimplementedSpeechServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechServiceServer struct {
}

func (UnimplementedSpeechServiceServer) Say(context.Context, *SayRequest) (*SayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}
func (UnimplementedSpeechServiceServer) ToText(context.Context, *ToTextRequest) (*ToTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToText not implemented")
}
func (UnimplementedSpeechServiceServer) ToSpeech(context.Context, *ToSpeechRequest) (*ToSpeechResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToSpeech not implemented")
}
func (UnimplementedSpeechServiceServer) Completion(context.Context, *CompletionRequest) (*CompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Completion not implemented")
}
func (UnimplementedSpeechServiceServer) GetCommands(context.Context, *GetCommandsRequest) (*GetCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedSpeechServiceServer) ListenTrigger(context.Context, *ListenTriggerRequest) (*ListenTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenTrigger not implemented")
}
func (UnimplementedSpeechServiceServer) IsSpeaking(context.Context, *IsSpeakingRequest) (*IsSpeakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSpeaking not implemented")
}
func (UnimplementedSpeechServiceServer) mustEmbedUnimplementedSpeechServiceServer() {}

// UnsafeSpeechServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechServiceServer will
// result in compilation errors.
type UnsafeSpeechServiceServer interface {
	mustEmbedUnimplementedSpeechServiceServer()
}

func RegisterSpeechServiceServer(s grpc.ServiceRegistrar, srv SpeechServiceServer) {
	s.RegisterService(&SpeechService_ServiceDesc, srv)
}

func _SpeechService_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServiceServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechService_Say_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServiceServer).Say(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechService_ToText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServiceServer).ToText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechService_ToText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServiceServer).ToText(ctx, req.(*ToTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechService_ToSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToSpeechRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServiceServer).ToSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechService_ToSpeech_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServiceServer).ToSpeech(ctx, req.(*ToSpeechRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechService_Completion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServiceServer).Completion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechService_Completion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServiceServer).Completion(ctx, req.(*CompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechService_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServiceServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechService_GetCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServiceServer).GetCommands(ctx, req.(*GetCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechService_ListenTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServiceServer).ListenTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechService_ListenTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServiceServer).ListenTrigger(ctx, req.(*ListenTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechService_IsSpeaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSpeakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServiceServer).IsSpeaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechService_IsSpeaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServiceServer).IsSpeaking(ctx, req.(*IsSpeakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeechService_ServiceDesc is the grpc.ServiceDesc for SpeechService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeechService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viamlabs.service.speech.v1.SpeechService",
	HandlerType: (*SpeechServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _SpeechService_Say_Handler,
		},
		{
			MethodName: "ToText",
			Handler:    _SpeechService_ToText_Handler,
		},
		{
			MethodName: "ToSpeech",
			Handler:    _SpeechService_ToSpeech_Handler,
		},
		{
			MethodName: "Completion",
			Handler:    _SpeechService_Completion_Handler,
		},
		{
			MethodName: "GetCommands",
			Handler:    _SpeechService_GetCommands_Handler,
		},
		{
			MethodName: "ListenTrigger",
			Handler:    _SpeechService_ListenTrigger_Handler,
		},
		{
			MethodName: "IsSpeaking",
			Handler:    _SpeechService_IsSpeaking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speech.proto",
}
