// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: speech.proto

package speech_api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SayRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Blocking      bool                   `protobuf:"varint,3,opt,name=blocking,proto3" json:"blocking,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SayRequest) Reset() {
	*x = SayRequest{}
	mi := &file_speech_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SayRequest) ProtoMessage() {}

func (x *SayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SayRequest.ProtoReflect.Descriptor instead.
func (*SayRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{0}
}

func (x *SayRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SayRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SayRequest) GetBlocking() bool {
	if x != nil {
		return x.Blocking
	}
	return false
}

type SayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SayResponse) Reset() {
	*x = SayResponse{}
	mi := &file_speech_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SayResponse) ProtoMessage() {}

func (x *SayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SayResponse.ProtoReflect.Descriptor instead.
func (*SayResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{1}
}

func (x *SayResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ToTextRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Speech        []byte                 `protobuf:"bytes,2,opt,name=speech,proto3" json:"speech,omitempty"`
	Format        string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToTextRequest) Reset() {
	*x = ToTextRequest{}
	mi := &file_speech_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToTextRequest) ProtoMessage() {}

func (x *ToTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToTextRequest.ProtoReflect.Descriptor instead.
func (*ToTextRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{2}
}

func (x *ToTextRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToTextRequest) GetSpeech() []byte {
	if x != nil {
		return x.Speech
	}
	return nil
}

func (x *ToTextRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ToTextResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToTextResponse) Reset() {
	*x = ToTextResponse{}
	mi := &file_speech_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToTextResponse) ProtoMessage() {}

func (x *ToTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToTextResponse.ProtoReflect.Descriptor instead.
func (*ToTextResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{3}
}

func (x *ToTextResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ToSpeechRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToSpeechRequest) Reset() {
	*x = ToSpeechRequest{}
	mi := &file_speech_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToSpeechRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToSpeechRequest) ProtoMessage() {}

func (x *ToSpeechRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToSpeechRequest.ProtoReflect.Descriptor instead.
func (*ToSpeechRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{4}
}

func (x *ToSpeechRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToSpeechRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ToSpeechResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Speech        []byte                 `protobuf:"bytes,1,opt,name=speech,proto3" json:"speech,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToSpeechResponse) Reset() {
	*x = ToSpeechResponse{}
	mi := &file_speech_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToSpeechResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToSpeechResponse) ProtoMessage() {}

func (x *ToSpeechResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToSpeechResponse.ProtoReflect.Descriptor instead.
func (*ToSpeechResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{5}
}

func (x *ToSpeechResponse) GetSpeech() []byte {
	if x != nil {
		return x.Speech
	}
	return nil
}

type CompletionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Blocking      bool                   `protobuf:"varint,3,opt,name=blocking,proto3" json:"blocking,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompletionRequest) Reset() {
	*x = CompletionRequest{}
	mi := &file_speech_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionRequest) ProtoMessage() {}

func (x *CompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionRequest.ProtoReflect.Descriptor instead.
func (*CompletionRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{6}
}

func (x *CompletionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompletionRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CompletionRequest) GetBlocking() bool {
	if x != nil {
		return x.Blocking
	}
	return false
}

type CompletionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompletionResponse) Reset() {
	*x = CompletionResponse{}
	mi := &file_speech_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionResponse) ProtoMessage() {}

func (x *CompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionResponse.ProtoReflect.Descriptor instead.
func (*CompletionResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{7}
}

func (x *CompletionResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GetCommandsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Number        int32                  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommandsRequest) Reset() {
	*x = GetCommandsRequest{}
	mi := &file_speech_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommandsRequest) ProtoMessage() {}

func (x *GetCommandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommandsRequest.ProtoReflect.Descriptor instead.
func (*GetCommandsRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{8}
}

func (x *GetCommandsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCommandsRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type GetCommandsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commands      []string               `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommandsResponse) Reset() {
	*x = GetCommandsResponse{}
	mi := &file_speech_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommandsResponse) ProtoMessage() {}

func (x *GetCommandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommandsResponse.ProtoReflect.Descriptor instead.
func (*GetCommandsResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{9}
}

func (x *GetCommandsResponse) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type ListenTriggerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenTriggerRequest) Reset() {
	*x = ListenTriggerRequest{}
	mi := &file_speech_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTriggerRequest) ProtoMessage() {}

func (x *ListenTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTriggerRequest.ProtoReflect.Descriptor instead.
func (*ListenTriggerRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{10}
}

func (x *ListenTriggerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListenTriggerRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListenTriggerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenTriggerResponse) Reset() {
	*x = ListenTriggerResponse{}
	mi := &file_speech_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTriggerResponse) ProtoMessage() {}

func (x *ListenTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTriggerResponse.ProtoReflect.Descriptor instead.
func (*ListenTriggerResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{11}
}

func (x *ListenTriggerResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ListenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	mi := &file_speech_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{12}
}

func (x *ListenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenResponse) Reset() {
	*x = ListenResponse{}
	mi := &file_speech_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenResponse) ProtoMessage() {}

func (x *ListenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{13}
}

func (x *ListenResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type IsSpeakingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsSpeakingRequest) Reset() {
	*x = IsSpeakingRequest{}
	mi := &file_speech_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsSpeakingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSpeakingRequest) ProtoMessage() {}

func (x *IsSpeakingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSpeakingRequest.ProtoReflect.Descriptor instead.
func (*IsSpeakingRequest) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{14}
}

func (x *IsSpeakingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IsSpeakingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsSpeakingResponse) Reset() {
	*x = IsSpeakingResponse{}
	mi := &file_speech_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsSpeakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSpeakingResponse) ProtoMessage() {}

func (x *IsSpeakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_speech_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSpeakingResponse.ProtoReflect.Descriptor instead.
func (*IsSpeakingResponse) Descriptor() ([]byte, []int) {
	return file_speech_proto_rawDescGZIP(), []int{15}
}

func (x *IsSpeakingResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_speech_proto protoreflect.FileDescriptor

const file_speech_proto_rawDesc = "" +
	"\n" +
	"\fspeech.proto\x12\x1aviamlabs.service.speech.v1\x1a\x1cgoogle/api/annotations.proto\"P\n" +
	"\n" +
	"SayRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12\x1a\n" +
	"\bblocking\x18\x03 \x01(\bR\bblocking\"!\n" +
	"\vSayResponse\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"S\n" +
	"\rToTextRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06speech\x18\x02 \x01(\fR\x06speech\x12\x16\n" +
	"\x06format\x18\x03 \x01(\tR\x06format\"$\n" +
	"\x0eToTextResponse\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"9\n" +
	"\x0fToSpeechRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"*\n" +
	"\x10ToSpeechResponse\x12\x16\n" +
	"\x06speech\x18\x01 \x01(\fR\x06speech\"W\n" +
	"\x11CompletionRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12\x1a\n" +
	"\bblocking\x18\x03 \x01(\bR\bblocking\"(\n" +
	"\x12CompletionResponse\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"@\n" +
	"\x12GetCommandsRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06number\x18\x02 \x01(\x05R\x06number\"1\n" +
	"\x13GetCommandsResponse\x12\x1a\n" +
	"\bcommands\x18\x01 \x03(\tR\bcommands\">\n" +
	"\x14ListenTriggerRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\"+\n" +
	"\x15ListenTriggerResponse\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"#\n" +
	"\rListenRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"$\n" +
	"\x0eListenResponse\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"'\n" +
	"\x11IsSpeakingRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\",\n" +
	"\x12IsSpeakingResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\bR\x06status2\xa8\n" +
	"\n" +
	"\rSpeechService\x12\x8a\x01\n" +
	"\x03Say\x12&.viamlabs.service.speech.v1.SayRequest\x1a'.viamlabs.service.speech.v1.SayResponse\"2\x82\xd3\xe4\x93\x02,\"*/viamlabs/api/v1/service/speech/{name}/say\x12\x97\x01\n" +
	"\x06ToText\x12).viamlabs.service.speech.v1.ToTextRequest\x1a*.viamlabs.service.speech.v1.ToTextResponse\"6\x82\xd3\xe4\x93\x020\"./viamlabs/api/v1/service/speech/{name}/to_text\x12\x9f\x01\n" +
	"\bToSpeech\x12+.viamlabs.service.speech.v1.ToSpeechRequest\x1a,.viamlabs.service.speech.v1.ToSpeechResponse\"8\x82\xd3\xe4\x93\x022\"0/viamlabs/api/v1/service/speech/{name}/to_speech\x12\xa6\x01\n" +
	"\n" +
	"Completion\x12-.viamlabs.service.speech.v1.CompletionRequest\x1a..viamlabs.service.speech.v1.CompletionResponse\"9\x82\xd3\xe4\x93\x023\"1/viamlabs/api/v1/service/speech/{name}/completion\x12\xab\x01\n" +
	"\vGetCommands\x12..viamlabs.service.speech.v1.GetCommandsRequest\x1a/.viamlabs.service.speech.v1.GetCommandsResponse\";\x82\xd3\xe4\x93\x025\"3/viamlabs/api/v1/service/speech/{name}/get_commands\x12\xb3\x01\n" +
	"\rListenTrigger\x120.viamlabs.service.speech.v1.ListenTriggerRequest\x1a1.viamlabs.service.speech.v1.ListenTriggerResponse\"=\x82\xd3\xe4\x93\x027\"5/viamlabs/api/v1/service/speech/{name}/listen_trigger\x12\x96\x01\n" +
	"\x06Listen\x12).viamlabs.service.speech.v1.ListenRequest\x1a*.viamlabs.service.speech.v1.ListenResponse\"5\x82\xd3\xe4\x93\x02/\"-/viamlabs/api/v1/service/speech/{name}/listen\x12\xa7\x01\n" +
	"\n" +
	"IsSpeaking\x12-.viamlabs.service.speech.v1.IsSpeakingRequest\x1a..viamlabs.service.speech.v1.IsSpeakingResponse\":\x82\xd3\xe4\x93\x024\"2/viamlabs/api/v1/service/speech/{name}/is_speakingB\x0eZ\f./speech-apib\x06proto3"

var (
	file_speech_proto_rawDescOnce sync.Once
	file_speech_proto_rawDescData []byte
)

func file_speech_proto_rawDescGZIP() []byte {
	file_speech_proto_rawDescOnce.Do(func() {
		file_speech_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_speech_proto_rawDesc), len(file_speech_proto_rawDesc)))
	})
	return file_speech_proto_rawDescData
}

var file_speech_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_speech_proto_goTypes = []any{
	(*SayRequest)(nil),            // 0: viamlabs.service.speech.v1.SayRequest
	(*SayResponse)(nil),           // 1: viamlabs.service.speech.v1.SayResponse
	(*ToTextRequest)(nil),         // 2: viamlabs.service.speech.v1.ToTextRequest
	(*ToTextResponse)(nil),        // 3: viamlabs.service.speech.v1.ToTextResponse
	(*ToSpeechRequest)(nil),       // 4: viamlabs.service.speech.v1.ToSpeechRequest
	(*ToSpeechResponse)(nil),      // 5: viamlabs.service.speech.v1.ToSpeechResponse
	(*CompletionRequest)(nil),     // 6: viamlabs.service.speech.v1.CompletionRequest
	(*CompletionResponse)(nil),    // 7: viamlabs.service.speech.v1.CompletionResponse
	(*GetCommandsRequest)(nil),    // 8: viamlabs.service.speech.v1.GetCommandsRequest
	(*GetCommandsResponse)(nil),   // 9: viamlabs.service.speech.v1.GetCommandsResponse
	(*ListenTriggerRequest)(nil),  // 10: viamlabs.service.speech.v1.ListenTriggerRequest
	(*ListenTriggerResponse)(nil), // 11: viamlabs.service.speech.v1.ListenTriggerResponse
	(*ListenRequest)(nil),         // 12: viamlabs.service.speech.v1.ListenRequest
	(*ListenResponse)(nil),        // 13: viamlabs.service.speech.v1.ListenResponse
	(*IsSpeakingRequest)(nil),     // 14: viamlabs.service.speech.v1.IsSpeakingRequest
	(*IsSpeakingResponse)(nil),    // 15: viamlabs.service.speech.v1.IsSpeakingResponse
}
var file_speech_proto_depIdxs = []int32{
	0,  // 0: viamlabs.service.speech.v1.SpeechService.Say:input_type -> viamlabs.service.speech.v1.SayRequest
	2,  // 1: viamlabs.service.speech.v1.SpeechService.ToText:input_type -> viamlabs.service.speech.v1.ToTextRequest
	4,  // 2: viamlabs.service.speech.v1.SpeechService.ToSpeech:input_type -> viamlabs.service.speech.v1.ToSpeechRequest
	6,  // 3: viamlabs.service.speech.v1.SpeechService.Completion:input_type -> viamlabs.service.speech.v1.CompletionRequest
	8,  // 4: viamlabs.service.speech.v1.SpeechService.GetCommands:input_type -> viamlabs.service.speech.v1.GetCommandsRequest
	10, // 5: viamlabs.service.speech.v1.SpeechService.ListenTrigger:input_type -> viamlabs.service.speech.v1.ListenTriggerRequest
	12, // 6: viamlabs.service.speech.v1.SpeechService.Listen:input_type -> viamlabs.service.speech.v1.ListenRequest
	14, // 7: viamlabs.service.speech.v1.SpeechService.IsSpeaking:input_type -> viamlabs.service.speech.v1.IsSpeakingRequest
	1,  // 8: viamlabs.service.speech.v1.SpeechService.Say:output_type -> viamlabs.service.speech.v1.SayResponse
	3,  // 9: viamlabs.service.speech.v1.SpeechService.ToText:output_type -> viamlabs.service.speech.v1.ToTextResponse
	5,  // 10: viamlabs.service.speech.v1.SpeechService.ToSpeech:output_type -> viamlabs.service.speech.v1.ToSpeechResponse
	7,  // 11: viamlabs.service.speech.v1.SpeechService.Completion:output_type -> viamlabs.service.speech.v1.CompletionResponse
	9,  // 12: viamlabs.service.speech.v1.SpeechService.GetCommands:output_type -> viamlabs.service.speech.v1.GetCommandsResponse
	11, // 13: viamlabs.service.speech.v1.SpeechService.ListenTrigger:output_type -> viamlabs.service.speech.v1.ListenTriggerResponse
	13, // 14: viamlabs.service.speech.v1.SpeechService.Listen:output_type -> viamlabs.service.speech.v1.ListenResponse
	15, // 15: viamlabs.service.speech.v1.SpeechService.IsSpeaking:output_type -> viamlabs.service.speech.v1.IsSpeakingResponse
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_speech_proto_init() }
func file_speech_proto_init() {
	if File_speech_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_speech_proto_rawDesc), len(file_speech_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speech_proto_goTypes,
		DependencyIndexes: file_speech_proto_depIdxs,
		MessageInfos:      file_speech_proto_msgTypes,
	}.Build()
	File_speech_proto = out.File
	file_speech_proto_goTypes = nil
	file_speech_proto_depIdxs = nil
}
